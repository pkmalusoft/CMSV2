@model CMSV2.Models.ImportManifestVM
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";

    //var cities = (IEnumerable<CourierMVC.EntityFramework.S_CityMaster>)ViewBag.Cities;
}
<style>

  
    .reve_rates > input {
        font-size: 12px !important;
    }

    .reve_rates1 > input {
        font-size: 12px !important;
    }

    .reve_rates2 > input {
        font-size: 12px !important;
    }

    

    .reve_rates3 > textarea {
        min-height: 4rem !important;
        font-size: 12px !important;
    }

    
</style>
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />
<script type="text/javascript">   
    var placeSearch, autocomplete, originairportCity, destinationairportCity;  

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        
        originairportCity = new google.maps.places.Autocomplete(
            document.getElementById('OriginAirportCity'), { types: ['geocode'] });



        destinationairportCity = new google.maps.places.Autocomplete(
            document.getElementById('DestinationAirportCity'), { types: ['geocode'] });

        //destinationCity = new google.maps.places.Autocomplete(
        //    document.getElementById('tDestinationCityID'), { types: ['geocode'] });

        //destinationCountry = new google.maps.places.Autocomplete(
        //    document.getElementById('tDestinationCountryID'), { types: ['geocode'] });

    }

    function fillInAddress() {
        debugger;
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        console.log(place.address_components);

       
        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate(obj) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                $(obj).setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script type="text/javascript">
    var objitems = [];
    function callniceapi() {
        debugger;
        $.ajax({
            type: "GET",
            url: "http://www.niceexpress.net/API/v1/getAPI.do?dateTime=20-May-2021",
            crossDomain: true,
            dataType: 'jsonp',
            //data: { Details: JSON.stringify(objitems) },
            contentType:"application/json;charset=UTF-8",
            headers: {
                "niceexpress-apikey": "14c3993c0bb082dcafae9183ac7946d5be7a0e565e12bbd32f5d8d5d78bf3121",
                "niceexpress-signature": "37ef0bccb326b2057121ab74fd81cbeee892debaeccdd632d57fff66ffd86ece"
            },
            success: function (response) {
                debugger;
                console.log(response);

            },
            error: function (err) {
                console.log(err);
            }
        });
    }

    function UpdateImported() {
        $.ajax({
            type: "POST",
            url: "/ImportManifest/UpdateImportedItem",
            datatype: "Json",
            data: { Details: JSON.stringify(objitems) },
            contentType:'application/x-www-form-urlencoded',
            success: function (response) {                
                
            },
            error: function (err) {
                console.log(err);
            }
        });
    }
    function savefixation() {
        debugger;
        var Field = $('#FieldName').val();
        var SourceValue = $('#SourceValue').val();
        var DestinationValue = $('#DestinationValue').val();
        var DestinationCountry = $('#DestinationCountry').val();
        var DestinationCity = $('#DestinationCity').val();
        var DestinationLocation = $('#DestinationLocation').val();
        $("#listContainer").html('');
        //$('#imgloader').removeClass('hide');
        $('#loaderpopup').modal('show')
        var newobjitems = [];
        $.each(objitems, function (index, item) {
            var i = index;
            debugger;
            if (Field == 'DestinationLocation') {
                if (SourceValue == item.DestinationLocation) {
                    item.DestinationLocation = DestinationLocation;
                    item.DestinationCountry = DestinationCountry;
                    item.DestinationCity = DestinationCity;
                }
            }
            else if (Field == 'DestinationCountry') {
                if (SourceValue == item.DestinationCountry) {
                    item.DestinationCountry = DestinationCountry;
                }
            }
            else if (Field == 'DestinationCity') {
                    if (SourceValue == item.DestinationCity) {
                        item.DestinationCity = DestinationCity;
                    }                
            }
            else {

            }
            var CompanyCountryName = $('#CompanyCountryName').val().toLowerCase();
            if (item.DestinationCountry.toLowerCase().indexOf(CompanyCountryName) >= 0)
                item.ImportType = 'Import';
            else
                item.ImportType = 'Transit';
            //if (item.DestinationCity.indexOf("DUBAI") >= 0)
            //    item.ImportType = 'Import';
            //else
            //    item.ImportType = 'Transit';

            //if (item.DestinationLocation.indexOf("DUBAI") >= 0)
            //    item.ImportType = 'Import';
            //else
            //    item.ImportType = 'Transit';

            newobjitems.push(item);
            if (objitems.length == (i + 1)) {
                debugger;
                objitems = [];
                objitems = newobjitems;
                additem();
                UpdateImported();
                $('#imgloader').addClass('hide');
                $('#loaderpopup').modal('hide')
                $('#fixationpopup').modal('hide');
            }
        });
    }
    function additem() {
        $.each(objitems, function (index, item) {
            var i = index;
            var ReceiverContact = item.ReceiverContact;
            var ReceiverAddress = item.ReceiverAddress;
            var datahtml = '<input type="hidden" class="hdndeleted" id="hdndeleted_' + i + '"  value="false" /> <input type="hidden" id="hdnAWBNo_' + i + '"  value="' + item.AWBNo + '" /> ';
            datahtml = datahtml + '<input type="hidden" id="hdnBag_' + i + '"  value="' + item.Bag + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnAWBDate_' + i + '"  value="' + item.AWBDate + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnShipper_' + i + '"  value="' + item.Shipper + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnReceiver_' + i + '"  value="' + item.Receiver + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnReceiverContact_' + i + '"  value="' + ReceiverContact + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnReceiverPhone_' + i + '"  value="' + item.ReceiverPhone + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnReceiverAddress_' + i + '"  value="' + ReceiverAddress + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnDestinationLocation_' + i + '"  value="' + item.DestinationLocation + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnDestinationCountry_' + i + '"  value="' + item.DestinationCountry + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnDestinationCity_' + i + '"  value="' + item.DestinationCity + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnPcs_' + i + '"  value="' + item.Pcs + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnWeight_' + i + '"  value="' + item.Weight + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnValue_' + i + '"  value="' + item.Value + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnCOD_' + i + '"  value="' + item.COD + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnContent_' + i + '"  value="' + item.Content + '"/>';
            datahtml = datahtml + '<input type="hidden" id="hdnImportType_' + i + '"  value="' + item.ImportType + '"/>';
            var html = '<tr><td>' + datahtml + (parseInt(i) + 1) + '</td><td>' + item.AWBNo + '</td><td>' + item.AWBDate + '</td><td>' + item.Shipper + '</td>' +
                '<td><strong>' + item.Receiver + '</strong><br/><span style="color:blue">' + ReceiverContact + '</span></br>' + ReceiverAddress + '<br/>' + item.ReceiverPhone + '</td>' +
                '<td>' + item.DestinationLocation + '</td><td>' + item.DestinationCity + '<br/>' + item.DestinationCountry + '</td>' +
                '<td>' + item.Bag + '</td>' +
                '<td>' + item.Content + '</td>' +
                '<td>' + item.Pcs + '</td>' +
                '<td class="text-right">' + parseFloat(item.Weight).toFixed(3) + '</td>' +
                '<td class="text-right">' + parseFloat(item.Value).toFixed(2) + '</td>' +
                '<td class="text-right">' + item.COD + '</td>' +
                '<td class="text-right">' + item.ImportType + '</td></tr>';

            $("#listContainer").append(html);
        });
    }
    $(document).on("change", "#importFile", function () {
        var files = $("#importFile").get(0).files;

        var formData = new FormData();
        formData.append('importFile', files[0]);
        
        if (files.length > 0) {
            $('#btnUpload').attr('disabled', 'disabled');
            $.ajax({
                url: '/ImportManifest/ImportFile',
                data: formData,
                type: 'POST',
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.Status === 1) {
                        var data = response.data;
                        //$('#imgloader').removeClass('hide');
                        $('#loaderpopup').modal('show')
                        $("#listContainer").html('');
                        $.each(data, function (index, item) {

                            debugger;
                            var i = $('#listContainer > tr').length;
                            var ReceiverContact = item.ReceiverContact;
                            var ReceiverAddress = item.ReceiverAddress;
                            if (ReceiverAddress.indexOf(":") >= 0) {
                                var addr = ReceiverAddress.split(':');
                                ReceiverContact = addr[0];
                                ReceiverAddress = addr[1];
                            }
                            var CompanyCountryName = $('#CompanyCountryName').val().toLowerCase();
                            if (item.DestinationCountry.toLowerCase().indexOf(CompanyCountryName) >= 0)
                                item.ImportType = 'Import';
                            else
                                item.ImportType = 'Transit';
                            objitems.push(item);
                            var datahtml = '<input type="hidden" class="hdndeleted" id="hdndeleted_' + i + '"  value="false" /> <input type="hidden" id="hdnAWBNo_' + i + '"  value="' + item.AWBNo + '" /> ';
                            datahtml = datahtml + '<input type="hidden" id="hdnBag_' + i + '"  value="' + item.Bag + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnAWBDate_' + i + '"  value="' + item.AWBDate + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnShipper_' + i + '"  value="' + item.Shipper + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnReceiver_' + i + '"  value="' + item.Receiver + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnReceiverContact_' + i + '"  value="' + ReceiverContact + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnReceiverPhone_' + i + '"  value="' + item.ReceiverPhone + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnReceiverAddress_' + i + '"  value="' + ReceiverAddress + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnDestinationLocation_' + i + '"  value="' + item.DestinationLocation + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnDestinationCountry_' + i + '"  value="' + item.DestinationCountry + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnDestinationCity_' + i + '"  value="' + item.DestinationCity + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnPcs_' + i + '"  value="' + item.Pcs + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnWeight_' + i + '"  value="' + item.Weight + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnValue_' + i + '"  value="' + item.Value + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnCOD_' + i + '"  value="' + item.COD + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnContent_' + i + '"  value="' + item.Content + '"/>';
                            datahtml = datahtml + '<input type="hidden" id="hdnImportType_' + i + '"  value="' + item.ImportType + '"/>';
                            var html = '<tr><td>' + datahtml + (parseInt(i) + 1) + '</td><td>' + item.AWBNo + '</td><td>' + item.AWBDate + '</td><td>' + item.Shipper + '</td>' +
                                '<td><strong>' + item.Receiver + '</strong><br/><span style="color:blue">' + ReceiverContact + '</span></br>' + ReceiverAddress + '<br/>' + item.ReceiverPhone + '</td>' +
                                '<td>' + item.DestinationLocation + '</td><td>' + item.DestinationCity + '<br/>' + item.DestinationCountry + '</td>' +
                                '<td>' + item.Bag + '</td>' +
                                '<td>' + item.Content + '</td>' +
                                '<td>' + item.Pcs + '</td>' +
                                '<td class="text-right">' + parseFloat(item.Weight).toFixed(3) + '</td>' +
                                '<td class="text-right">' + parseFloat(item.Value).toFixed(2) + '</td>' +
                                '<td class="text-right">' + item.COD + '</td>' +
                                '<td class="text-right">' + item.ImportType + '</td></tr>';

                            $("#listContainer").append(html);
                            $('#TotalAWB').val(index + 1);
                            if ((index + 1) == data.length) {
                                UpdateImported();
                                //$('#imgloader').addClass('hide');
                                $('#loaderpopup').modal('hide');
                                $('#btnUpload').removeAttr('disabled');
                            }
                            //<a awbno="' + item.AWB + '" href="javascript:void(0);" onclick="deletetrans(this,' + i + ')" class="rem">Remove</a>
                            //$("#detailsbody").append('<tr awbno="' + item.AWB + '"><td>' + (parseInt(index) + 1) + '</td><td>' + item.AWB + '</td><td>' + item.Origin + '</td><td>' + item.Destination + '</td><td></td></tr>');
                            //<td><a awbno="' + item.AWB + '" href="javascript:void(0);" class="rem">Remove</a></td>
                        });


                    } else {
                        //alert("Failed to Import");
                        $('#btnUpload').removeAttr('disabled');
                        $.notify(response.message, 'error');
                    }
                }
            });
        }
        else {
            $('#btnUpload').removeAttr('disabled');
        }
    });

    $(document).on("click", "#btnUpload", function () {
        
        
        $('#importFile').trigger('click');
    });


    $(document).ready(function () {
       // callniceapi();
        $('#btnFixation').click(function () {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ShowImportDataFixation", "ImportManifest")',
                datatype: "html",
                data: {
                    FieldName: 'DestinationLocation'
                },
                success: function (data) {
                    $("#popupContainer").html(data);
                    $('#fixationpopup').modal('show');
                }
            });
        })
        $('#btnSave').click(function () {
            debugger;


            if ($('#AgentID').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#AgentID').focus();
                return;
            }
            else if ($('#Route').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#Route').focus();
                return;
            }
            //else if ($('#Type').val() == '') {
            //    $.notify('Please Fill Required Fields!');
            //    $('#ShipmentTypeId').focus();
            //    return;
            //}
            else if ($('#OriginAirportCity').val() == '') {
                    $.notify('Please Fill Required Fields!');
                $('#OriginAirportCity').focus();
                    return;
            }
            else if ($('#DestinationAirportCity').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#DestinationAirportCity').focus();
                    return;
            }
            else if ($('#FlightDate1').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#FlightDate1').focus();
                return;
            }
            else if ($('#FlightNo').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#FlightNo').focus();
                return;
            }
            else if ($('#MAWB').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#MAWB').focus();
                return;
            }
            else if ($('#TotalAWB').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#TotalAWB').focus();
                return;
            }
            else if ($('#ParcelNo').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#ParcelNo').focus();
                return;
            }
            else if ($('#Weight').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#Weight').focus();
                return;
            }
            else if ($('#Bags').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#Bags').focus();
                return;
            }
            else if ($('#Bags').val() == '') {
                $.notify('Please Fill Required Fields!');
                $('#Bags').focus();
                return;
            }

            $('#btnSave').attr('disabled', 'disabled');
            var obj = [];
            var maxrow = $('#listContainer > tr').length;
            if (maxrow == 0) {
                alert('Click upload to import Items from Excel!');
                return;
            }
            for (i = 0; i < maxrow; i++) {
                var deleted = $('#hdndeleted_' + i).val();
                if (deleted == 'false') {
                    var AWBNo = $('#hdnAWBNo_' + i).val();
                    var AWBDate = $('#hdnAWBDate_' + i).val();
                    var BagNo = $('#hdnBag_' + i).val();
                    var Shipper = $('#hdnShipper_' + i).val();
                    var Receiver = $('#hdnReceiver_' + i).val();
                    var ReceiverContact = $('#hdnReceiverContact_' + i).val();
                    var ReceiverAddress = $('#hdnReceiverAddress_' + i).val();
                    var DestinationLocation = $('#hdnDestinationLocation_' + i).val();
                    var DestinationCountry = $('#hdnDestinationCountry_' + i).val();
                    var DestinationCity = $('#hdnDestinationCity_' + i).val();
                    var ReceiverPhone = $('#hdnReceiverPhone_' + i).val();
                    var Pcs = $('#hdnPcs_' + i).val();
                    var Weight = $('#hdnWeight_' + i).val();
                    var Content = $('#hdnContent_' + i).val();
                    var COD = $('#hdnCOD_' + i).val();
                    var Value = $('#hdnValue_' + i).val();
                    var ImportType = $('#hdnImportType_' + i).val();
                    var item = { AWBNo: AWBNo, AWBDate: AWBDate, Bag: BagNo, Shipper: Shipper, Receiver: Receiver, ReceiverContact: ReceiverContact, ReceiverAddress: ReceiverAddress, DestinationLocation: DestinationLocation, DestinationCountry: DestinationCountry, DestinationCity: DestinationCity, Pcs: Pcs, Weight: Weight, Content: Content, COD: COD, Value: Value, ReceiverPhone: ReceiverPhone, ImportType: ImportType }
                    obj.push(item);
                }
                if (maxrow == (i + 1)) {
                    //SaveImport
                    debugger;
                    var master = {
                        ID: $('#ID').val(),
                        ManifestNumber: $('#ManifestNumber').val(),
                        AgentID: $('#AgentID').val(),
                        ManifestDate: $('#ManifestDate').val(),
                        //ShipmentTypeId: $('#ShipmentTypeId').val(),
                        OriginAirportCity: $('#OriginAirportCity').val(),
                        DestinationAirportCity: $('#DestinationAirportCity').val(),
                        FlightDate1: $('#FlightDate1').val(),
                        FlightNo: $('#FlightNo').val(),
                        MAWB: $('#MAWB').val(),
                        Type: $('#Type').val(),
                        TotalAWB: $('#TotalAWB').val(),
                        ParcelNo: $('#ParcelNo').val(),
                        Weight: $('#Weight').val(),
                        Bags: $('#Bags').val(),
                        Route: $('#Route').val()
                    }
                    $.ajax({
                        type: "POST",
                        url: "/ImportManifest/SaveImport",
                        datatype: "Json",
                        data: { Master: JSON.stringify(master), Details: JSON.stringify(obj) },
                        success: function (response) {
                            $.notify("Import Shipment Saved Succesfully!", "success");
                            $('#btnSave').removeAttr('disabled');
                            window.location.href = "/ImportManifest/Index";
                        },
                        error: function (err) {
                            console.log(err);
                        }
                    });
                }
            }
        });
        if ($('#ID').val() > 0) {
            DisplayImprotItem();
        }

    });
    function DisplayImprotItem() {
        //GetImportItem
        $("#listContainer").html('');
        $.ajax({
            type: "POST",
            url: "/ImportManifest/GetImportItem",
            datatype: "Json",
            data: { id: $("#ID").val() },  //$("#CollectedByID option:selected").val()
            success: function (response) {
                debugger;
                var data = response.data;
                $.each(data, function (index, item) {
                    var i = $("#listContainer > tr").length;
                    var ReceiverContact = item.ReceiverContact;
                    var ReceiverAddress = item.ReceiverAddress;
                    objitems.push(item);
                    var datahtml = '<input type="hidden" class="hdndeleted" id="hdndeleted_' + i + '"  value="false" /> <input type="hidden" id="hdnAWBNo_' + i + '"  value="' + item.AWBNo + '" /> ';
                    datahtml = datahtml + '<input type="hidden" id="hdnBag_' + i + '"  value="' + item.Bag + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnAWBDate_' + i + '"  value="' + item.AWBDate + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnShipper_' + i + '"  value="' + item.Shipper + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnReceiver_' + i + '"  value="' + item.Receiver + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnReceiverContact_' + i + '"  value="' + ReceiverContact + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnReceiverPhone_' + i + '"  value="' + item.ReceiverPhone + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnReceiverAddress_' + i + '"  value="' + ReceiverAddress + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnDestinationLocation_' + i + '"  value="' + item.DestinationLocation + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnDestinationCountry_' + i + '"  value="' + item.DestinationCountry + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnDestinationCity_' + i + '"  value="' + item.DestinationCity + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnPcs_' + i + '"  value="' + item.Pcs + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnWeight_' + i + '"  value="' + item.Weight + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnValue_' + i + '"  value="' + item.Value + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnCOD_' + i + '"  value="' + item.COD + '"/>';
                    datahtml = datahtml + '<input type="hidden" id="hdnContent_' + i + '"  value="' + item.Content + '"/>';
                    var html = '<tr><td>' + datahtml + (parseInt(i) + 1) + '</td><td>' + item.AWBNo + '</td><td>' + item.AWBDate + '</td><td>' + item.Shipper + '</td>' +
                        '<td><strong>' + item.Receiver + '</strong><br/><span style="color:blue">' + ReceiverContact + '</span></br>' + ReceiverAddress + '<br/>' + item.ReceiverPhone + '</td>' +
                        '<td>' + item.DestinationLocation + '</td><td>' + item.DestinationCity + '<br/>' + item.DestinationCountry + '</td>' +
                        '<td>' + item.Bag + '</td>' +
                        '<td>' + item.Content + '</td>' +
                        '<td>' + item.Pcs + '</td>' +
                        '<td class="text-right">' + parseFloat(item.Weight).toFixed(3) + '</td>' +
                        '<td class="text-right">' + parseFloat(item.Value).toFixed(2) + '</td>' +
                        '<td class="text-right">' + item.COD + '</td>'+
                        '<td class="text-right">' + item.ImportType + '</td></tr>';

                    $("#listContainer").append(html);
                    if ((i + 1) == data.length) {
                        UpdateImported();
                    }
                });
            }
        });
    }
    $(function () {
        $('#CreatedDate').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
        $('#FlightDate1').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });

    });
</script>

<section class="content-header">
    <div class="row">
        <div class="col-md-5 pull-left">
            <h1 class="headingfont">Create Shipments</h1>
        </div>
        @*<div class="col-md-5 pull-right text-right">
                <h2 class="awb"><strong>@ViewBag.AWBNo</strong></h2>
                <h5 id="h1status" style="color:red">@ViewBag.Status</h5>

            </div>*@
        <hr />
    </div>
    <section class="content">
        @using (Html.BeginForm("Create", "ImportManifest", FormMethod.Post, new { @id = "importShipment" }))
        {
            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
          
            <div class="row">
                <div class="col-md-3">
                    @Html.HiddenFor(mode=>Model.ID)
                    @Html.HiddenFor(mode=>Model.CompanyCountryName)
                    @Html.LabelFor(model => model.ManifestNumber, "Manifest Number", htmlAttributes: new { @class = "headinglabel " })

                    @Html.TextBoxFor(model => model.ManifestNumber, new { @class = "form-control", @disabled = "true", @style = "text-decoration:none", @width = "100%" })

                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.ManifestDate, "Manifest Date", htmlAttributes: new { @class = "headinglabel" })

                    @Html.TextBoxFor(model => model.ManifestDate, new { @class = "form-control", @required = "true", @disabled = "true" })

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Agent</label>
                    @Html.DropDownListFor(model => model.AgentID, new SelectList(@ViewBag.Agent, "AgentID", "Name"), "Select", new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Route</label>
                    @Html.TextBoxFor(model => model.Route, new { @class = "form-control", @required = "true", @autocomplete = "off" })
                </div>

            </div>
            <div class="row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.OriginAirportCity, "Origin Airport City", htmlAttributes: new { @class = "headinglabel required"})

                    @Html.TextBoxFor(model => model.OriginAirportCity, new { @class = "form-control", @required = "true", @autocomplete = "off",@type="search" })
                    @Html.ValidationMessageFor(model => model.OriginAirportCity, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.DestinationAirportCity, "Destination Airport City", htmlAttributes: new { @class = "headinglabel required"})

                    @Html.TextBoxFor(model => model.DestinationAirportCity, new { @class = "form-control", @required = "true", @autocomplete = "off", @type = "search" })

                    @Html.ValidationMessageFor(model => model.DestinationAirportCity, "", new { @class = "text-danger" })

                </div>

                <div class="col-md-3">
                    
                    <label class="headinglabel required">Flight No</label>
                    @Html.TextBoxFor(model => model.FlightNo, new { @class = "form-control", @required = "true",@autocomplete="off" })

                    @Html.ValidationMessageFor(model => model.FlightNo, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Flight Date</label>
                    @Html.TextBoxFor(model => model.FlightDate1, new { @class = "form-control", @required = "true", @autocomplete = "off" })

                    @Html.ValidationMessageFor(model => model.FlightDate1, "", new { @class = "text-danger" })

                </div>
                @*<div class="col-md-2">
                    <label class="headinglabel required">Type</label>
                    @Html.DropDownListFor(model => model.Type, (IEnumerable<SelectListItem>)ViewBag.Type, Model.Type, htmlAttributes: new { @class = "form-control", @required = "true", @selected = @Model.Type })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })

                </div>*@

            </div>
            <div class="row">
                <div class="col-md-1">
                    @Html.LabelFor(model => model.MAWB, htmlAttributes: new { @class = "headinglabel required" })

                    @Html.TextBoxFor(model => model.MAWB, new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.MAWB, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-1">
                    <label class="headinglabel required">Parcel No.</label>
                    @Html.TextBoxFor(model => model.ParcelNo, new { @class = "form-control text-right", @required = "true" })
                    @Html.ValidationMessageFor(model => model.ParcelNo, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-1">
                    <label class="headinglabel required">Bag</label>

                    @Html.TextBoxFor(model => model.Bags, new { @class = "form-control text-right", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Bags, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-1">
                    <label class="headinglabel required">Weight</label>
                    @Html.TextBoxFor(model => model.Weight, new { @class = "form-control text-right", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })

                </div>

                <div class="col-md-1">
                    <label class="headinglabel required">Total AWB</label>

                    @Html.TextBoxFor(model => model.TotalAWB, new { @class = "form-control text-right", @min = 1, @required = "true" })
                    @Html.ValidationMessageFor(model => model.TotalAWB, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-1" style="padding-top:30px">
                    <input class="form-control" type="file" style="display:none" name="importFile" id="importFile" />
                    <input type="button" id="btnfile" style="display:none" />
                    
                    <a class="btn btn-primary" id="btnUpload" href="Javascript:void(0)">Upload</a>
                </div>
                <div class="col-md-1" style="padding-top:30px">
                    <input class="btn btn-primary" id="btnFixation" type="button" value="Data Fixation" />
                </div>
                <div class="col-md-5 btn-right">
                    <input type="button" value="Submit" id="btnSave" class="btn btn-primary waves-effect waves-light" />
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-danger btnwidth" })
                </div>

            </div>                       
            
            <div class="table-responsive tblbackground" style="padding:15px;margin-top:20px">
                <table class="table table-responsive table-bordered tblfont" role="grid" aria-describedby="datatable-1_info" style="min-width: 100%" id="DetailsTable">

                    @*<table class="table" style="min-width: 100%">*@
                    <thead class="input-table">
                        <tr>
                            <th width="20px">
                                S.No
                            </th>
                            <th>
                                AWB
                            </th>
                            <th>
                                AWB Date
                            </th>
                            <th>
                                Shipper
                            </th>
                            <th>
                                Receiver
                            </th>
                            <th width="100px">
                                Destination Location
                            </th>
                            <th width="100px">
                                Destination Country
                            </th>
                            <th>
                                Bag.No
                            </th>
                            <th>
                                Contents
                            </th>
                            <th>
                                PCS
                            </th>
                            <th>
                                Weight
                            </th>
                            <th>
                                Customs Value
                            </th>
                            <th>
                                COD
                            </th>
                            <th>
                                Type
                            </th>

                            <th></th>
                        </tr>
                    </thead>
                    <tbody class="input-table" id="listContainer">
                    </tbody>
                </table>
            </div>
            <hr />
           
            
        }
    </section>



</section>



<div class="modal fade" id="fixationpopup" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="border-radius:5px">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="exampleModalLabel">
                    Import Data Fixation
                </h4>
            </div>

            <div class="modal-body">
                <div class="container-fluid" id="popupContainer">

                </div>
            </div>
            <div class="modal-footer" style="padding-top: 5px">
                <button type="button" class="btn btn-primary" onclick="savefixation()">Save</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="loaderpopup" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="border-radius:5px">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="LoaderModalLabel">
                    Data Importing
                </h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12" style="text-align:center" >
                         <h2>Processing...</h2>
                        <img src="~/Content/img/loading-gif-free-download-6.gif" id="imgloader" class="" style="padding-left:15px;height:60px;width:60px;" />
                    </div>
                </div>
            </div>
            @*<div class="modal-footer" style="padding-top: 5px">
                <button type="button" class="btn btn-primary" onclick="savefixation()">Save</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>*@
        </div>
    </div>
</div>


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAKwJ15dRInM0Vi1IAvv6C4V4vVM5HVnMc&libraries=places&callback=initAutocomplete" async defer></script>