@model CMSV2.Models.DCODReceiptVM
@{
    
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    var _decimal = @Session["Decimal"].ToString();
}
    <style>
        .checkboxdesign {
            padding-top: 0px !important;
        }
        .w-6 {
            width: 6%;
        }

        .charegRow {
            background: #f8fbff;
        }

            .charegRow td {
                border: 0 !important;
            }
            .charegRow label{
                font-size:14px!important;
            }
        .taxBlock .col-md-2, .taxBlock .col-md-3 {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
        }

        .align_self {
            margin-top: 31px;
        }

        .w-12 {
            width: 12%;
        }

        .taxBlock label {
            margin: 0;
        }
    </style>
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />

<script type="text/javascript">
    function addCommas(nStr) {
        debugger;
        nStr += '';
        x = nStr.split('.');
        x1 = x[0];
        x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
    }
    function setTwoNumberDecimal(obj) {
        debugger;

       $(obj).val(parseFloat($(obj).val()).toFixed(@_decimal));
    }
    
    function setThreeNumberDecimal(obj) {
        debugger;

       $(obj).val(parseFloat($(obj).val()).toFixed(3));
    }
    function PaymentModeChange() {
        var val = $("#PaymentMode").val();
        if (val == 1) {
            $("#divCash").css({ "display": "none" });
            $("#divBank").css({ "display": "block" });
            $("#ChequeNo").attr({ "disabled": false })
            $("#ChequeDate").attr({ "disabled": false })
            $("#AcBankHeadId").attr("required", "required");
            $("#AcCashHeadId").removeAttr("required");
        } else {
            $("#divBank").css({ "display": "none" });
            $("#divCash").css({ "display": "block" });
            $("#ChequeNo").attr({ "disabled": true })
            $("#ChequeDate").attr({ "disabled": true })
            $("#AcCashHeadId").attr("required", "required");
            $("#AcBankHeadId").removeAttr("required");
        }

    }
    $(function () {
        $('#FromDate').datetimepicker({ format: 'DD-MM-YYYY' });

        $('#ToDate').datetimepicker({ format: 'DD-MM-YYYY' });

        $('#ReceiptDate').datetimepicker({ format: 'DD-MM-YYYY' });

        //var d = new Date();
        //var curr_date = d.getDate();
        //var curr_month = d.getMonth() + 1;
        //var curr_year = d.getFullYear();

        //var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();

        //$('#ReceiptDate').val(reqdate);
    });


</script>


<section class="content-header">
    <h1 class="headingfont">@ViewBag.Title</h1>
</section>

<section class="content">
    @if (Model.ReceiptID==0)
    {
    <div class="row no-margin">
        @{ Html.RenderAction("AWBSearch", "CODReceipt");}
    </div>
    }
	 
	
    <fieldset>
        @using (Html.BeginForm("Create", "CODReceipt", FormMethod.Post, new { @id = "codreceipt" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
        <div class="row no-margin" style="padding-top:10px">          
                <div class="col-md-12 btn-right">
                    <input type="submit" value="Save" id="btnsave" class="btn btn-primary btnwidth " />&nbsp;&nbsp;
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-danger btnwidth float-right" })
                </div>

            </div>
                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-md-2">
                        @Html.HiddenFor(model => model.ReceiptID)
                        <label class="headinglabel required "> Receipt No.</label>
                        @Html.TextBoxFor(model => model.ReceiptNo, new { @class = "form-control txttarget", @required = "true", @readonly = "true" })
                        @Html.ValidationMessageFor(model => model.ReceiptNo)
                    </div>
                    <div class="col-md-2">
                        <label class="headinglabel required">Receipt Date</label>
                        @Html.TextBoxFor(model => model.ReceiptDate, new { @class = "form-control text-right txttarget", @required = "true" })
                        @Html.ValidationMessageFor(model => model.ReceiptDate)
                    </div>
                    <div class="col-xs-12 col-sm-2">
                        <label class="headinglabel">Payment Mode</label>
                        <select id="PaymentMode" class="form-control" onchange="PaymentModeChange()">
                            <option value="1">Bank</option>
                            <option selected value="2">Cash</option>
                        </select>
                    </div>
                    <div class="col-xs-12 col-sm-6">
                        <div id="divCash">
                            <label class=" required headinglabel">Cash</label>
                            @Html.DropDownListFor(model => model.AchHeadID, new SelectList(@ViewBag.achead, "AcHeadID", "AcHead"), "Select", new { @class = "form-control", @required = "true", @id = "AcCashHeadId" })

                        </div>
                        <div id="divBank">
                            <div class="form-title">
                                <label class=" required headinglabel">Bank</label>
                            </div>
                            <div class="form-field">
                                @Html.DropDownListFor(model => model.AchHeadID, new SelectList(@ViewBag.acheadbank, "AcHeadID", "AcHead"), "Select", new { @class = "form-control", @id = "AcBankHeadId", @required = "true" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-xs-12 col-sm-2">
                        <label class=" required headinglabel">Cheque No</label>
                        @Html.TextBoxFor(model => model.ChequeNo, new { @class = "form-control textright" })

                    </div>
                    <div class="col-xs-12 col-sm-2">
                        <label class=" required headinglabel">Cheque Date</label>
                        @if (Model.ChequeDate != null)
                        {
                            @Html.TextBoxFor(m => m.ChequeDate, new { Value = Model.ChequeDate.Value.ToString("dd-MMM-yyyy"), id = "", @class = "form-control text-right" })
                        }
                        else
                        {

                            @Html.TextBoxFor(model => model.ChequeDate, new { @class = "form-control text-right" })
                        }
                    </div>
                    <div class="col-xs-12 col-sm-2">
                        <label class=" required headinglabel">Currency</label>
                        @Html.DropDownListFor(model => model.CurrencyID, (SelectList)ViewBag.Currency, "Select", new { ng_model = "ExR", ng_change = "getselectval()", @class = "form-control", required = "required" })

                    </div>
                    <div class="col-xs-12 col-sm-2">
                        <label class="headinglabel">Exchange Rate</label>
                        @Html.TextBoxFor(model => model.EXRate, string.Format("{0:n2}", Model.EXRate), new { @class = "form-control textright" })

                    </div>
                    <div class="col-xs-12 col-sm-2">
                        <label class=" required headinglabel">Amount Received</label>

                        @Html.TextBoxFor(model => model.Amount, string.Format("{0:n2}", Model.Amount), new { @class = "form-control amt textright TotalInvoiceAmount", @required = "true", @onchange = "setTwoNumberDecimal(this)" })

                    </div>
                    <div class="col-xs-12 col-sm-2 checkboxdesign" style="padding-top:30px!important">                        
                        @Html.CheckBox("AutoAllocate", new { @name = "AutoAllocate", @onchange = "autoallocation()" })
                        <label class="headinglabel">Auto Allocate</label>

                    </div>

                </div>
                <div class="row no-margin" style="padding-top: 10px">
                    <div class="col-md-12">
                        <label class=" required headinglabel">Remarks</label>
                        @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control", @required = "true"  })

                    </div>
                </div>

                <div class="row no-margin" style="padding-top: 10px">
                    <div class="col-md-12">
                        <table class="table table-bordered table-responsive" id="details" style="background-color: white">

                            <thead>
                            <th style="text-align:center">
                                SNo.
                                All  <input type="checkbox" style="width:20px;" class="Selectall" id="Selectall" value="0" name="Selectall" />
                            </th>
                            <th width="12%">AWB No.</th>
                            <th>AWB Date</th>
                            <th width="20%">Consignee</th>
                            <th>Destination Country</th>
                            <th>Total Charge</th>                        
                            <th>Allocated Amount</th>
                            <th>Discount</th>

                            </thead>
                            <tbody class="input-table" id="listContainer">
                                @{Html.RenderPartial("ReceiptList", Model);}                                                              
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="5" class="text-right" >Total</td>
                                    <td><input type="text" class="text-right" id="txtTotalCharge" value="0" /> </td>
                                    <td><input type="text" class="text-right" id="txtTotalReceived" value="0" /> </td>
                                    <td><input type="text" class="text-right" id="txtTotalDiscount" value="0" /> </td>                                    
                                </tr>                                
                            </tfoot>
                        </table>
                    </div>
                </div>

       


                }
        </fieldset>
</section>


<script type="text/javascript">
    function checkallocation(i,obj) {
        debugger;
        var id = $(obj).attr('id');
        var val = $(obj).val();
        $(obj).attr('value', val);
        var totalcharge = $('#txtTotalCharge_' + i).val();
        var Received = $('#txtAmountAllocated_' + i).val();
        var discount = $('#txtDiscount_' + i).val();       
        if (totalcharge == '')
            totalcharge == 0;
        if (Received == '')
            Received = 0;

        if (discount == '')
            discount = 0;


        if (parseFloat(totalcharge) > parseFloat(Received)) {
            discount = parseFloat(totalcharge) - parseFloat(Received);                                    
        }
        else {
            Received = parseFloat(totalcharge) - (parseFloat(discount));            
        }
       
        if (id.indexOf('txtAmountAllocated') >= 0) {
            $('#txtDiscount_' + i).val(discount);
        }
        else {
            $('#txtAmountAllocated_' + i).val(Received);
        }

    }
    function calculatetotal() {
        debugger;
        var maxrow = $('#listContainer > tr').length;
        var totalcharges = 0;
        var totalcod = 0;
        var totaldiscount = 0;
        $('#txtTotalCharge').val(parseFloat(totalcharges).toFixed(2));
        $('#txtTotalDiscount').val(parseFloat(totaldiscount).toFixed(2));
        $('#txtTotalReceived').val(parseFloat(totalcod).toFixed(2));
        for (j = 0; j < maxrow; j++) {
            var awbchecked = $('#chk_' + j).prop('checked');
            console.log(awbchecked);
            if (awbchecked == true) {
                debugger;
                var totalcharge = $('#txtTotalCharge_' + j).val();
                var Received = $('#txtAmountAllocated_' + j).val();
                var discount = $('#txtDiscount_' + j).val();                
                if (totalcharge == '')
                    totalcharge = 0;
                if (discount == '')
                    discount = 0;
                if (Received == '')
                    Received = 0;
                
                totalcharges = parseFloat(totalcharges) + parseFloat(totalcharge);
                totaldiscount = parseFloat(totaldiscount) + parseFloat(discount);
                totalcod = parseFloat(totalcod) + parseFloat(Received);
                console.log(Received);
            }
            $('#txtTotalCharge').val(parseFloat(totalcharges).toFixed(2));
            $('#txtTotalDiscount').val(parseFloat(totaldiscount).toFixed(2));
            $('#txtTotalReceived').val(parseFloat(totalcod).toFixed(2));
        }
    }
   

</script>
<script type="text/javascript">
      function autoallocation() {
          
          var idtext = 'txtAmountAllocated_';
        if ($("#AutoAllocate").is(':checked')) {
            var TotalAmount = parseFloat($('#Amount').val()).toFixed(2);
            if (TotalAmount > 0) {
                var amt = 0;
                $('[id^=' + idtext + ']').each(function (index, item) {
                    if ($(item).val() == "" || $(item).val() == null) {
                        $(item).val(0);
                    }
                    $('#txtDiscount_' + index).val(0);
                    var itemval = $(item).val();
                    itemval = itemval.replace(',', '');
                    var idindex = $(item).attr('id').split('_')[1];
                    var balance = $('#txtTotalCharge_' + idindex).val();
                    var balanceval = balance.replace(',', '');

                    if (parseFloat(TotalAmount) > parseFloat(balanceval)) {
                        $(item).val(parseFloat(balanceval).toFixed(@_decimal));
                        TotalAmount = parseFloat(TotalAmount).toFixed(@_decimal) - parseFloat(balanceval).toFixed(@_decimal);
                        $('#chk_' + idindex).prop('checked', true);
                    }
                    else if (parseFloat(TotalAmount) > 0) {
                        $(item).val(parseFloat(TotalAmount).toFixed(@_decimal));
                        TotalAmount = 0;
                        $('#chk_' + idindex).prop('checked', true);
                    }
                    else {
                        $(item).val(parseFloat(TotalAmount).toFixed(@_decimal));
                        $('#chk_' + idindex).prop('checked', false);
                        $('#chk_' + idindex).attr('value', 'false');
                    }
                    calculatetotal();
                });

            }
            else {
                $('[id^=' + idtext + ']').each(function (index, item) {
                    if ($(item).val() == "" || $(item).val() == null) {
                        $(item).val(0);
                    }
                    var itemval = $(item).val();
                    itemval = itemval.replace(',', '');
                    $(item).val("0.00");
                    $('#txtDiscount_' + index).val(0);
                    $('#chk_' + idindex).prop('checked', false);                    
                    calculatetotal();

                });

            }
        }
        else {

                $('[id^=' + idtext + ']').each(function (index, item) {
                    if ($(item).val() == "" || $(item).val() == null) {
                        $(item).val(0);
                    }
                    var itemval = $(item).val();
                    itemval = itemval.replace(',', '');
                    $(item).val("0.00");
                    //$('#chkallocate_' + idindex).prop('checked', false);
                    //$('#chkallocate_' + idindex).removeAttr('checked');
                    $('#chk_' + index).prop('checked', false);   
                    calculatetotal();

                });


        }

    }
    $(document).ready(function () {
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $('#Amount').change(function () {
            if ($('#Amount').val() == '') {
                $('#Amount').val(0);
            }
            else {
                var amt = $('#Amount').val();
                $('#Amount').val(parseFloat(amt).toFixed(2));
            }
        });
        $('#Amount').trigger('change');
        $('#btnsave').click(function () {

            var totreceived = $('#txtTotalReceived').val();
            var totdiscount = $('#txtTotalDiscount').val();
        var amount = $('#Amount').val();
        var totval = parseFloat(totreceived);
        var totval = parseFloat(totreceived);
            if (parseFloat(amount) == 0) {
                alert('Received Amount could not zero!');
                return false;
            }
            else if (parseFloat(amount) != parseFloat(totreceived)) {
                alert('Received Amount should be equal to allocated amount!');
                return false;
            }
        });
        
        PaymentModeChange();
        calculatetotal();
    });
</script>