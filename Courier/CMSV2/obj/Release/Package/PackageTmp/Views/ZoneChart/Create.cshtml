@model CMSV2.Models.ZoneChartVM

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}

<link href="/Content/Multiselect/bootstrap-multiselect.css" rel="stylesheet" />
<script src="/Content/Multiselect/bootstrap-multiselect.js"></script>
<style>
    #CountryID + .btn-group button, #CountryID + .btn-group, #CityID + .btn-group button, #CityID + .btn-group {
        display: block;
        width: 100%;
    }
</style>
<script type="text/javascript">

    $(document).ready(function () {
        $("#TextBoxVenueLocation").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("GetEventVenuesList", "ZoneChart")",
                    data: { SearchText: request.term },
                    dataType: "json",
                    type: "GET",
                    success: function (data) {
                        if (data.length == 0) {
                            $('#EventVenueId').val("");
                            $('#VenueLocationMesssage').show();
                            return false;
                        }
                        else {
                            response($.map(data, function (item) {
                                return {
                                    label: item.description,
                                    value: item.place_id,
                                    types: item.types
                                }
                            }));
                        }
                    },
                    error: function (x, y, z) {
                        alert('error');
                    }
                });
            },
            messages: {
                noResults: "", results: ""
            },
            select: function (event, ui) {
                $('#TextBoxVenueLocation').val(ui.item.label);
                $('#EventVenueId').val(ui.item.value);
                console.log(ui.item.types)
                return false;
            }
        }).autocomplete("widget").addClass("CitiesAutocomplete");
    });
</script>
<script type="text/javascript">
    //    google.maps.event.addDomListener(window, 'load', function () {
    //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
    //        google.maps.event.addListener(places, 'place_changed', function () {
    //            var place = places.getPlace();
    //    var address = place.formatted_address;
    //    var latitude = place.geometry.location.A;
    //    var longitude = place.geometry.location.F;
    //    var mesg = "Address: " + address;
    //    mesg += "\nLatitude: " + latitude;
    //    mesg += "\nLongitude: " + longitude;
    //    alert(mesg);
    //});
    //    });

    var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('LocationName'));

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component', 'place_id']);
        autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);


        autocompleteCity = new google.maps.places.Autocomplete(
            document.getElementById('CityName'), { types: ['geocode'] });

        autocompleteCountry = new google.maps.places.Autocomplete(
            document.getElementById('CountryName'), { types: ['geocode'] });

    }

    function fillInAddress() {
        debugger;
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();             

        var postcode = '';
        //GetEventVenuesList
        $.ajax({
            type: "GET",
            url: "/ZoneChart/GetEventVenuesList",
            datatype: "Json",
            data: { SearchText: $('#LocationName').val() },
            success: function (response) {
                debugger;
                console.log(response);
                $('#PlaceID').val(response[0].place_id);
            }
        });
     
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            console.log(types);
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'sublocality' || type == 'sublocality_level_1') {                                        
                    $('#SubLocality').val(component.long_name);
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCity.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script type="text/javascript">
    var countrylist = "";
   

    $(document).ready(function () {
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        //$(".divcountry").hide();
        //$(".divcity").hide();

        //$("#ZoneID").prop("disabled", true);

        //$("#ZoneCategoryID").change(function () {
        //    $("#ZoneID").prop("disabled", false);
        //});

        $('#tbl1').on("click", "#DeleteNewRow", function () {
            debugger;
            $(this).parent().parent().remove();
            //$(this).parent().parent().addClass('hide');
            //var obj = $(this).parent().parent().find('.hdndeleted');
            //$(obj).val(true);
        });

        
        $("#btnsave").click(function () {
            var i = $('#tbl1 > tr').length;
            if (i == 0) {
                alert('select Zone Locations!');
                return false;
            }
            //var countrycount = $("#CountryID :selected").length;
            //var citycount = $("#CityID :selected").length;
            //if ($("#ZoneCategoryID option:selected").val() == "") {
            //    $("#validations").show();
            //    return false;
            //}
            if ($("#ZoneID option:selected").val() == "") {
                $("#validations").show();
                return false;
            }
            else if (countrycount == 0 && $("#StatusZone").val() == "I") {

                $("#validations").show();
                return false;
            }
            else if (citycount == 0 && $("#StatusZone").val() == "D") {
                $("#validations").show();
                return false;
            }
            else {
                $("#validations").hide();
                return true;
            }
        });
        $('#btnadd').click(function () {
            
            var locationname = $('#LocationName').val();
            var countryname = $('#CountryName').val();
            var cityname = $('#CityName').val();
            var sublocality = $('#SubLocality').val();
            if (cityname == null)
                cityname = '';
            if (countryname == null)
                countryname = '';
            if (location != null && location != '' && countryname!='' && countryname!=null) {
                var placeid = $('#PlaceID').val();
                var i = $('#tbl1 > tr').length;
                html = '<tr>' +
                    '<td>' + locationname + '<input type = "hidden" name="Details[' + i + '].PlaceID"  value = "' + placeid + '" /><input type="hidden" name="Details[' + i + '].LocationName"  value="' + locationname + '" />  <input id="" name="Details[' + i + '].CountryName" value=' + countryname + ' type="hidden"><input id="" name="Details[' + i + '].CityName" value="' + cityname + '" type="hidden"/><input id="" name="Details[' + i + '].SubLocality" value="' + sublocality + '" type="hidden"></td>' +
                    '<td>' + cityname + '</td>' +
                    '<td>' + countryname + '</td>' +
                    '<td>' + sublocality + '</td>' +
                    '<td><a href="javascript:void(0)" id="DeleteNewRow"><i class="fa fa-times"></i></a></td></tr>';
                $('#tbl1').append(html);

                $('#LocationName').val('');
                $('#CountryName').val('');
                $('#CityName').val('');
                $('#PlaceID').val('');
                $('#LocationName').focus();
            }
            else {
                $('#LocationName').focus();
            }
        }); 

    });
</script>

<section class="content-header">
    <h1 class="headingfont">Zone Chart</h1>

</section>

<section class="content">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
        <fieldset>

            <div class="row no-margin">
                <div class="col-md-3">
                    @Html.HiddenFor(mode=>Model.ZoneChartID)
                    <label class="headinglabel required">Zone Category</label>
                    @Html.DropDownListFor(model => model.ZoneCategoryID, new SelectList(@ViewBag.ZoneCategory, "ZoneCategoryID", "ZoneCategory1"), "Select", new { @class = "form-control", @required = "true" })
                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Zone</label>
                    @Html.HiddenFor(model => model.StatusZone)
                    @Html.DropDownListFor(model => model.ZoneID, new SelectList(@ViewBag.Zones, "ZoneID", "ZoneName"), "Select", new { @class = "form-control", @required = "true" })

                </div>

                @*<div class="col-md-3 divcountry">
            <label class="headinglabel required">Country</label><br />
            <select id="CountryID" name="country" multiple="multiple">
                <option value=""></option>
            </select>
        </div>
        <div class="col-md-3 divcity">
            <label class="headinglabel required">City</label><br />
            <select id="CityID" name="city" multiple="multiple">
                <option value=""></option>
            </select>

        </div>*@

                <div class="col-md-6 btn-right">

                    <input type="submit" value="Save" class="btn btn-primary btnwidth" data-toggle="tooltip" title="Click here" id="btnsave" />



                    <a href='@Url.Action("Index", "ZoneChart", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here" style="margin-left:5px;">Cancel</a>

                </div>
            </div>
            <div class="row no-margin" style="padding-top: 10px">

                <div class="col-md-5">
                    <label class="headinglabel">Location</label>
                    <input type="hidden" id="EventVenueId" class="form-control" />
                    @*<input type="text" id="TextBoxVenueLocation" class="form-control" style="background-color:bisque" />*@
                    
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control txttarget autocomplete", @onFocus = "geolocate()", @placeholder = "Location" })
                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">City</label>
                    @Html.TextBoxFor(model => model.CityName, new { @class = "form-control txttarget", @readonly = "readonly" })

                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Country</label>
                    @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control txttarget", @readonly = "readonly" })
                </div>
                <div class="col-md-1 hide">
                    <label class="headinglabel required">PlaceID</label>
                    @Html.TextBoxFor(model => model.PlaceID, new { @class = "form-control txttarget", @readonly = "readonly" })
                    <input type="hidden" id="SubLocality" />
                </div>
                <div class="col-md-1" style="padding-top:10px">
                    <button type="button" id="btnadd" class="btn btn-primary small_btn"><i class="fa fa-plus-circle" aria-hidden="true"></i></button>

                </div>

            </div>
            <div class="row no-margin" style="padding-top:10px">
                <div class="col-md-3">

                </div>
            </div>

            <div class="row no-margin" style="padding-top:10px">
              
            </div>
        </fieldset>
        <div class="row no-margin" style="padding-top:10px">
            <div class="col-xs-12 no-padding for-device">
                <div class="data-table payment-div">
                    <div class="data">
                        <table border="1" style="margin-top: 15px; " class="table table-bordered table-responsive">
                            <thead style="background:transparent;">
                                <tr style="font-weight: bold; background:#07a7e3;">
                                    <th>Location Name</th>
                                    <th>City Name</th>
                                    <th>Country Name</th>       
                                    <th>Sub Locality</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="tbl1">
                                @if (Model.ZoneChartID > 0)
                                {
                                    for (int i = 0; i < Model.Details.Count; i++)
                                    {
                                <tr>
                                    <td>
                                        @Html.HiddenFor(item => @Model.Details[i].ZoneChartDetailID)
                                        @Html.HiddenFor(item => @Model.Details[i].LocationName)
                                        @Html.HiddenFor(item => @Model.Details[i].CityName)
                                        @Html.HiddenFor(item => @Model.Details[i].CountryName)
                                        @Html.HiddenFor(item => @Model.Details[i].PlaceID)
                                        @Html.HiddenFor(item => @Model.Details[i].SubLocality)
                                        @Model.Details[i].LocationName
                                    </td>
                                    <td>
                                        @Model.Details[i].CityName
                                    </td>
                                    <td>
                                        @Model.Details[i].CountryName
                                    </td>
                                    <td>
                                        @Model.Details[i].SubLocality
                                    </td>
                                    <td><a href="javascript:void(0)" id="DeleteNewRow"><i class="fa fa-times"></i></a></td>
                                </tr>
                                    }
                                }
                                 </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

                                 }
</section>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>

