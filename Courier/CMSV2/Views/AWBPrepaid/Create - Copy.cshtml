@model CMSV2.Models.AWBPrepaidVM
@{

    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";    
    var spath = "/AWBPrepaid/Index/0";// System.Configuration.ConfigurationManager.AppSettings["spath"].ToString();    
    var _decimal = @Session["Decimal"].ToString();
}
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />

<style>
    #tbl1 tr {
        height: 32px;
    }

    /*#tbl1 tr:first-of-type {
            background: #35b8eb;
            color: #fff;
        }*/

    .form_field {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 9px 23px rgba(0, 0, 0, 0.09), 0 5px 5px rgba(0, 0, 0, 0.06) !important;
        padding: 16px;
        margin-top: 21px;
    }

    .headinglabel {
        font-family: Calibri;
        font-size: 17px;
        color: #1b1919 !important;
    }

    .modal-dialog {
        width: 800px;
    }

    #staffmodelbody {
        max-height: calc(100vh - 200px);
        overflow-y: auto;
    }

    .flex {
        display: flex;
    }

    .justify-content-between {
        justify-content: space-between;
    }

    #popup h5 {
        border: 2px solid #35b8eb;
        min-width: 150px;
        height: 40px;
        border-radius: 5px;
        line-height: 40px;
        color: #35b8eb;
        text-align: center;
        font-weight: bold;
    }
</style>
<script type="text/javascript">  
    var placeSearch, autocomplete, destination;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('OriginLocation'));

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component', 'place_id']);
        autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        //autocomplete.addListener('place_changed', fillInAddress);


        destination = new google.maps.places.Autocomplete(
            document.getElementById('DestinationLocation'), { types: [] });

    }

    function fillInAddress() {
        debugger;
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        var postcode = '';
        //GetEventVenuesList
        $.ajax({
            type: "GET",
            url: "/ZoneChart/GetEventVenuesList",
            datatype: "Json",
            data: { SearchText: $('#LocationName').val() },
            success: function (response) {
                debugger;
                console.log(response);
                $('#PlaceID').val(response[0].place_id);
            }
        });

        $.each(place.address_components, function (index, component) {
            var types = component.types;
            console.log(types);
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'sublocality' || type == 'sublocality_level_1') {
                    $('#SubLocality').val(component.long_name);
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCity.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script type="text/javascript">

    function isNumberKey1(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        //if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
        if (charCode != 8 && charCode != 0 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function checkawbstartend() {
        if ($('#NoOfAWBs').val() == '') {
            $('#NoOfAWBs').val(0);
        }

        var awbcount = $('#NoOfAWBs').val();
        if ($('#AWBNOFrom').val() == '')
            $('#AWBNOFrom').val(0);
        var startno = $('#AWBNOFrom').val();
        $('#AWBNOTo').val(parseInt(startno) + parseInt(awbcount));
    }
    $(document).ready(function () {

        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });
        $("textarea").css({ "border-radius": "5px" });

        //$("#FMoney").attr("readonly", false);
        $("#PaymentMode").focus();

        if ('@Model.PrepaidAWBID' == 0) {
            $("#divCash").css({ "display": "none" });
            $("#divBank").css({ "display": "block" });

            //$("#CurrencyId").val('@Session["BaseCurrencyId"]');
            

        } else {
            $('#btnsearch').attr('disabled', 'disabled');
            if ('@Model.ChequeNo' == null || '@Model.ChequeNo' == '') {
                $("#divCash").css({ "display": "block" });
                $("#divBank").css({ "display": "none" });
                $("#ChequeNo").attr("readonly","readonly")
                $("#ChequeDate").attr("readonly","readonly")
                $("#PaymentMode").val(2);

            } else {
                $("#divCash").css({ "display": "none" });
                $("#divBank").css({ "display": "block" });

            }
        }
       

        $("#CourierCharge").blur(function () {
            var wt = $(this).val();
            if (wt == null || wt == "") {
                $("#CourierCharge").val("0.00");
            } else {
                $("#CourierCharge").val(parseFloat(wt).toFixed(@_decimal));

            }
        });
        $("#CourierCharge").change(function () {            
                var charge = parseFloat($(this).val()).toFixed(@_decimal)
                var awbcount = $('#NoOfAWBs').val();
                var totalcharge = parseInt(awbcount) * parseFloat(charge);
                $('#Total').val(parseFloat(totalcharge).toFixed(@_decimal));
        })

        $("#CustomerName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/AWBPrepaid/GetCustomerName',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.CustomerName,
                                value: val.CustomerName,
                                CustomerId: val.CustomerID,
                                type: val.CustomerType,
                                Location:val.LocationName
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $("#CustomerName").val(ui.item.value);
                $('#CustomerID').val(ui.item.CustomerId);
                $('#OriginLocation').val(ui.item.Location);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#CustomerName").val(i.item.label);
                $('#CustomerID').val(i.item.CustomerId);
                $('#OriginLocation').val(i.item.Location);
            }, 

        });
     $('#AWBNOFrom').change(function () {
            var awbcount = $('#NoOfAWBs').val();
            var startno = $('#AWBNOFrom').val();
            $('#AWBNOTo').val(parseInt(startno) +parseInt(awbcount));
        })
        $('#btnsearch').click(function () {
            debugger;
            if ($('#AWBNOFrom').val() == 0 || $('#AWBNOFrom').val()=='') {
                alert('Enter Starting AWB No.!');
                return;
            }
            if ($('#AWBNOTo').val() == 0 || $('#AWBNOTo').val() == '') {
                alert('Enter Ending AWB No.!');
                return;
            }

            if ($('#NoOfAWBs').val() == 0 || $('#NoOfAWBs').val() == '') {
                alert('Enter No of AWBs!');
                return;
            }

            var startno = $('#AWBNOFrom').val();
            var endno = $('#AWBNOTo').val();
            $.ajax({
                type: "Get",
                url: '/AWBBookIssue/GetAWBBook/',
                data: {
                    'StartAWB': startno, 'EndAWB': endno, AWBBookIssueId:0, PrepaidAWBID:$('#PrepaidAWBID').val() },
                success: function (response) {
                    if (response.status == "ok") {
                        var data = response.awbs;
                        $('#tbl1').html('');
                        //$scope.Orders = data;
                        var amt = 0;
                        for (var i = 1; i <= data.length; i++) {
                            debugger;

                            $('#tbl1').append('<tr>' +
                                '<td>' + i + '</td>' +
                                '<td>' + data[i - 1].AWBNo + '</td>' +
                                '</tr>');
                        }
                    }
                    else {
                        alert(response.message);
                    }
                }
            });

        });



        if ($("#PrepaidAWBID").val() > 0) {
            if ($("#StatusEntry").val() == "BK") {
                $("#Bank").prop('checked', true);
                $("#Cash").prop('checked', false);
                $("#Bank").trigger("click");
            }
            else if ($("#StatusEntry").val() == "CS") {
                $("#Cash").prop('checked', true);
                $("#Bank").prop('checked', false);
                $("#Cash").trigger("click");
            }
            PaymentModeChange();                        
        }

        $('#btnSave').click(function (e) {
            debugger;
            var result = false;
            var rowcount = $('#tbl1 > tr').length;
          
            if (rowcount == 0) {
                alert('Click Refresh Button to Generate AWBNo!');                
            }
            else {
                result = true;
            }

            if (result == false) {
                e.preventDefault();
            }
        });
        
        //$('#btnsave').click(function () {
        //    debugger;
        //    var rowcount = $('#tbl1 > tr').length();
        //    alert(rowcount);
        //    if (rowcount == 0) {
        //        alert('Generate AWBNo!');
        //        return false;
        //    }
        //})

    });
</script>

<script>
    function Comma(Num) { //function to add commas to textboxes
        Num += '';
        Num = Num.replace(',', ''); Num = Num.replace(',', ''); Num = Num.replace(',', '');
        Num = Num.replace(',', ''); Num = Num.replace(',', ''); Num = Num.replace(',', '');
        x = Num.split('.');
        x1 = x[0];
        x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1))
            x1 = x1.replace(rgx, '$1' + ',' + '$2');
        $(".aeamt").val(x1 + x2);
    }
</script>

<script type="text/javascript">    
   
    function PaymentModeChange() {
        var val = $("#PaymentMode").val();
        if (val == 1) {
            $("#divCash").css({ "display": "none" });
            $("#divBank").css({ "display": "block" });
            $("#ChequeNo").attr('required', 'required');
            $("#ChequeDate").attr('required', 'required');
            $("#ChequeNo").removeAttr('readonly');
            $("#ChequeDate").removeAttr('readonly');
            $('#CashBank').removeAttr('required', 'required');
            $('#ChequeBank').attr('required', 'required');
        } else {
            $("#divBank").css({ "display": "none" });
            $("#divCash").css({ "display": "block" });
            $("#ChequeNo").removeAttr('required');
            $("#ChequeDate").removeAttr('required');
            $("#ChequeNo").attr('readonly', 'readonly');
            $("#ChequeDate").attr('readonly','readonly')
            $('#CashBank').attr('required','required');

            $('#ChequeBank').removeAttr('required')
        }

    }
</script>

<section class="content-header">
    <div class="row">
        <div class="col-md-5 pull-left">
            <h1 class="headingfont">@ViewBag.Title</h1>
        </div>
        

    </div>
    <div class="row">

    </div>
</section>

<!-- Main content -->
<section class="content">
    @using (Html.BeginForm("Create", "AWBPrepaid", FormMethod.Post, new { @id = "FormReceipt" }))
    {
        @Html.ValidationSummary(true)

        @Html.HiddenFor(model => model.PrepaidAWBID)
        @Html.HiddenFor(model => model.StatusEntry)
        @Html.HiddenFor(model => model.AcjournalID)
        <div class="row no-margin" style="padding-top:10px">
            <div class="col-xs-12 col-sm-2">
                <label class="headinglabel">Document No</label>
                @Html.TextBoxFor(model => model.Documentno, new { @class = "form-control", @readonly = "readonly" })

            </div>
            <div class="col-xs-12 col-sm-2">
                <label class="headinglabel">Entry Date</label>
                @Html.TextBoxFor(model => model.TransDate, new { @class = "form-control text-right", @required = true })
            </div>
            <div class="col-xs-12 col-sm-4">
                <label class="headinglabel required">Customer </label>
                @Html.TextBoxFor(model => model.CustomerName, new { @class = "form-control", @required = "true" })
                @Html.HiddenFor(model=>Model.CustomerID)
            </div>
            <div class="col-xs-2 col-sm-4">
                <label class="headinglabel">Origin</label>
                @Html.TextBoxFor(model => model.OriginLocation, new { @class = "form-control" })
            </div>

        </div>
        <div class="row no-margin" style="padding-top:10px">
            <div class="col-xs-2 col-sm-4">
                <label class="headinglabel">Destination Location</label>
                @Html.TextBoxFor(model => model.DestinationLocation, new { @class = "form-control" })
            </div>
            <div class="col-xs-12 col-sm-2">
                <label class="headinglabel">Department</label>
                @Html.DropDownListFor(model => model.DepartmentID, new SelectList(@ViewBag.Department, "DepartmentID", "Department1"), "Select", new { @class = "form-control", @required = true })
            </div>
            <div class="col-xs-12 col-sm-1">
                <label class="headinglabel">No. of AWBs</label>
                @Html.TextBoxFor(model => model.NoOfAWBs, new { @class = "form-control", @onchange = "checkawbstartend()" })
            </div>
            <div class="col-xs-12 col-sm-2">
                <label class=" required headinglabel">Start AWB</label>
                @Html.TextBoxFor(model => model.AWBNOFrom, new { @class = "form-control textright", required = "required", @onchange = "checkawbstartend()" })
            </div>
            <div class="col-xs-12 col-sm-2">
                <label class=" required headinglabel">End AWB</label>
                @Html.TextBoxFor(model => model.AWBNOTo, new { @class = "form-control textright", required = "required" , @readonly = "true" })
            </div>
            <div class="col-xs-12 col-sm-1 pull-left" style="padding-right:5px">
                <button class="btn btn-primary small_btn" type="button" id="btnsearch"><i class="fa fa-refresh" aria-hidden="true"></i> </button>
            </div>

        </div>
        <div class="row no-margin" style="padding-top:10px">

            <div class="col-xs-12 col-sm-2">
                <label class="headinglabel">Payment Mode</label>
                <select id="PaymentMode" class="form-control" onchange="PaymentModeChange()">
                    <option value="1">Bank</option>
                    <option value="2">Cash</option>
                </select>
            </div>
            <div class="col-xs-12 col-sm-6">
                <div id="divCash">
                    <label class=" required headinglabel">Cash</label>
                    @Html.DropDownListFor(model => model.CashBank, new SelectList(@ViewBag.achead, "AcHeadID", "AcHead"), "Select", new { @class = "form-control" })

                </div>
                <div id="divBank">
                    <div class="form-title">
                        <label class=" required headinglabel">Cash/Bank Account</label>
                    </div>
                    <div class="form-field">
                        @Html.DropDownListFor(model => model.ChequeBank, new SelectList(@ViewBag.acheadbank, "AcHeadID", "AcHead"), "Select", new { @class = "form-control", @required = true })
                    </div>
                </div>

            </div>
            <div class="col-xs-12 col-sm-2">
                <label class=" required headinglabel">Cheque Number.</label>
                @Html.TextBoxFor(model => model.ChequeNo, new { @class = "form-control textright", @required = true })

            </div>
            <div class="col-xs-12 col-sm-2">
                <label class=" required headinglabel">Cheque Date</label>

                @Html.TextBoxFor(model => model.ChequeDate, new { @class = "form-control text-right", @required = true })

            </div>

        </div>

        <div class="row no-margin" style="padding-top:10px">


            <div class="col-xs-12 col-sm-2">
                <label class=" required headinglabel">Courier Charge</label>
                @Html.TextBoxFor(model => model.CourierCharge, string.Format("{0:n2}", Model.CourierCharge), new { @class = "form-control aamt textright TotalInvoiceAmount", required = "required" })
            </div>
            <div class="col-xs-12 col-sm-3">
                <label class="headinglabel required">Employee</label>
                @Html.DropDownListFor(model => model.EmployeeID, new SelectList(ViewBag.Employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
            </div>
            <div class="col-xs-13 col-sm-2">
                <label class="headinglabel">Total Charge</label>
                @Html.TextBoxFor(model => model.Total, string.Format("{0:n2}", Model.Total), new { @class = "form-control txttarget" })
            </div>



        </div>





        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12 btn-right">
                @if (Model.PrepaidAWBID > 0)
                {
                    <input type="submit" class="btn btn-primary  btnwidth" id="btnSave" value="Update" />
                }
                else
                {
                    <input type="submit" class="btn btn-primary  btnwidth" value="Save" id="btnSave"  name="Command" />
                }
                <a href='@Url.Action("Index", "AWBPrepaid", new { id = 0 })' class="btn btn-danger  btnwidth">Cancel</a>
            </div>
        </div>
        <div class="row no-margin" style="padding-top:10px">
            <div class="col-xs-12 no-padding for-device">
                <div class="data-table payment-div">
                    <div class="data">
                        <table border="1" style="margin-top: 15px; " class="table table-bordered table-responsive">
                            <thead style="background:transparent;">
                                <tr style="font-weight: bold; background:#07a7e3;">
                                    <th>
                                        S.No
                                    </th>
                                    <th>AWB No.</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="tbl1">
                                @if (Model.PrepaidAWBID > 0)
                                {
                                    for (int i = 1; i <= Model.Details.Count; i++)
                                    {

                                        <tr>
                                            <td>
                                                @i
                                            </td>
                                            <td>
                                                @Model.Details[i - 1].AWBNo                                               
                                            </td>
                                        </tr>

                                    }
                                }
                            </tbody>

                        </table>


                    </div>
                </div>
            </div>
        </div>

    }
</section>


<div>
</div>

<script type="text/javascript">
     function ValidateTotal() {
        debugger;
            var TotalAmount = 0;
            var idtext = 'txtinvoice_';
        var amt = 0;
        if ($('#Balance').val() == "") {
            $('#Balance').val(0);
        }
        var balance =parseFloat($('#Balance').val());

            $('[id^=' + idtext + ']').each(function (index, item) {
              //  var id = $(item).attr('id').split('_')[1];
                if ($(item).val() == "" || $(item).val()==null) {
                    $(item).val(0);
                }
                var paidamount = parseFloat($(item).val());
                amt = amt + paidamount;

                if (parseFloat(amt) == 0) {
                    $('#btnsave').attr('disabled', 'disabled');
                }

                @*if (parseFloat($('#FMoney').val()) == 0) {
                    $('#FMoney').val(parseFloat(amt).toFixed(@_decimal))
                }*@
                $('#AllocatedAmount').val(parseFloat(amt).toFixed(@_decimal));
                var payingamount = parseFloat($('#FMoney').val());
                var allocatedamount = parseFloat($('#AllocatedAmount').val());
                var advance = 0;
                if (allocatedamount > (payingamount + advance)) {
                    $('#btnsave').attr('disabled', 'disabled');
                }
                else if (parseFloat(amt) == 0) {
                    $('#btnsave').attr('disabled', 'disabled');
                }
                else {
                    $('#btnsave').removeAttr('disabled');
                }

                //$('#Balance').val(parseFloat(advance).toFixed(@_decimal));

            });

            //var TotalInvoiceAmount = parseFloat($('.TotalInvoiceAmount').val());
            //if (TotalAmount > TotalInvoiceAmount) {
            //    $('#msg1').show();
            //    $('#msg1').text('Sum of Amount cannot be greater than Total Invoice Amount');
            //    return false;
            //} else {
            //    return true;
            //}
        }
    // When the document is ready

    $(document).ready(function () {
        var startdate = '@Session["FyearFrom"].ToString()';
        var enddate = '@Session["FyearTo"].ToString()';
    
        $('#TransDate').datetimepicker({
            format: 'DD-MM-YYYY'
        });
        $('#ChequeDate').datetimepicker({
            format: 'DD-MM-YYYY'
        });

       

    });

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>