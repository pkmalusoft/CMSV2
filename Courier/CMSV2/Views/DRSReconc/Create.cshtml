@model CMSV2.Models.DRSReceiptVM

@{

    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";    
    var spath = "/DRSReceipt/Index/0";// System.Configuration.ConfigurationManager.AppSettings["spath"].ToString();    
    var _decimal = @Session["Decimal"].ToString();
}
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />

<style>
    #tbl1 tr {
        height: 32px;
    }

    /*#tbl1 tr:first-of-type {
            background: #35b8eb;
            color: #fff;
        }*/

    .form_field {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 9px 23px rgba(0, 0, 0, 0.09), 0 5px 5px rgba(0, 0, 0, 0.06) !important;
        padding: 16px;
        margin-top: 21px;
    }

    .headinglabel {
        font-family: Calibri;
        font-size: 17px;
        color: #1b1919 !important;
    }

    .modal-dialog {
        width: 800px;
    }

    #staffmodelbody {
        max-height: calc(100vh - 200px);
        overflow-y: auto;
    }

    .flex {
        display: flex;
    }

    .justify-content-between {
        justify-content: space-between;
    }

    #popup h5 {
        border: 2px solid #35b8eb;
        min-width: 150px;
        height: 40px;
        border-radius: 5px;
        line-height: 40px;
        color: #35b8eb;
        text-align: center;
        font-weight: bold;
    }
</style>
<script type="text/javascript">

    function isNumberKey1(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        //if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
        if (charCode != 8 && charCode != 0 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    $(document).ready(function () {

        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });
        $("textarea").css({ "border-radius": "5px" });

        //$("#FMoney").attr("readonly", false);
        $("#PaymentMode").focus();

        if ('@Model.DRSRecPayID' == 0) {
            $("#divCash").css({ "display": "none" });
            $("#divBank").css({ "display": "block" });

            //$("#CurrencyId").val('@Session["BaseCurrencyId"]');
            $("#EXRate").val('1.00');

        } else {
            $('#btnsearch').attr('disabled', 'disabled');
            if ('@Model.ChequeNo' == null || '@Model.ChequeNo' == '') {
                $("#divCash").css({ "display": "block" });
                $("#divBank").css({ "display": "none" });
                $("#ChequeNo").attr("readonly","readonly")
                $("#ChequeDate").attr("readonly","readonly")
                $("#PaymentMode").val(2);

            } else {
                $("#divCash").css({ "display": "none" });
                $("#divBank").css({ "display": "block" });

            }
        }
        var wt = $("#EXRate").val();
        if (wt == null || wt == "") {
            $("#EXRate").val("0.00");
        } else {
            $("#EXRate").val(parseFloat(wt).toFixed(@_decimal));
        }

        $("#EXRate").blur(function () {
            var wt = $(this).val();
            $("#EXRate").val(parseFloat(wt).toFixed(@_decimal));

        });
        $("#FMoney").blur(function () {
            var wt = $(this).val();
            if (wt == null || wt == "") {
                $("#FMoney").val("0.00");
            } else {
                $("#FMoney").val(parseFloat(wt).toFixed(@_decimal));
            }
        });

        $(".chkAllocate").click(function () {
            if ($(".chkAllocate").is(':checked')) {

                $("#FMoney").attr("readonly", false);
                $(".readonlyamt").show();
                $(".textamt").hide();
            }
            else {

                $("#FMoney").attr("readonly", true);
                $(".readonlyamt").hide();
                $(".textamt").show();
            }
        });
        //$.ajax({
        //    type: "GET",
        //    url: "/PickUpRequest/GetCustomerName",
        //    datatype: "Json",
        //    success: function (response) {
        //        debugger;
        //        customernames = response.data;
        //        $("#CustomerName").autocomplete({
        //            source: customernames
        //        });
        //    }
        //});

         $("#DRSNo").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DRSReceipt/GetDRSNo',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.DRSNo,
                                value: val.DRSID,
                                DRSDate:val.DRSDate
                            }
                        }))
                    }
                })
            },
            minLength: 0,
            autoFocus: false,
            focus: function (e, i) {
                $("#DRSNo").val(i.item.label);
                $('#DRSID').val(i.item.value);
                $('#DRSID').attr('label', i.item.label);
             },
            select: function (e, i) {
                e.preventDefault();
                $("#DRSNo").val(i.item.label);
                $('#DRSID').val(i.item.value);
                $('#DRSID').attr('label', i.item.label);

            },

        });
        $('#btnsearch').click(function () {

            if ($('#CustomerID').val() == 0) {
                alert('Select Customer!');
                return;
            }

            if ($('#FMoney').val() == "") {// || $('#FMoney').val()=="0") {
                //alert('Enter Receipt Amount!');
                $('#FMoney').val(0);
            }

            var ID = $('#DRSID').val();
            var RecPayId = $('#DRSRecPayID').val();
            $.ajax({
                type: "GET",
                url: '/DRSReceipt/GetDRSAWB/',
                data: { 'DRSID': ID, 'RecPayId': RecPayId },
                success: function (data) {
                    $('#tbl1').html('');
                    //$scope.Orders = data;
                    var amt = 0;
                    for (var i = 0; i < data.length; i++) {
                        
                        debugger;
                                                
                        $('#tbl1').append('<tr>' +
                            '<td>' + data[i].AWBNO + '<input type = "hidden" name ="Details[' + i + '].AWBNO"  value = "' + data[i].AWBNO + '" /><input type="hidden" name="Details[' + i + '].DRSRecPayDetailID"  value="' + data[i].DRSRecPayDetailID + '" /><input type="hidden" name="Details[' + i + '].InScanID"  value="' + data[i].InScanID + '" />  </td>' +
                            '<td>' + data[i].AWBDate + '<input id="" name="Details[' + i + '].AWBDate" value=' + data[i].DateTime + ' type="hidden"></td>' +
                            '<td class="text-right">' + parseFloat(data[i].CourierCharge).toFixed(@_decimal) + '<input id="" name="Details[' + i + '].CourierCharge" value=' + data[i].CourierCharge + ' type="hidden"></td>' +
                            '<td class="text-right">' + parseFloat(data[i].MaterialCost).toFixed(@_decimal) + '<input id="" name="Details[' + i + '].MaterialCost" value=' + data[i].MaterialCost+ ' type="hidden"/></td>' +
                            '<td class="text-right"><input class="text-right" id="txtccrec_' + i + '" name="Details[' + i + '].CCReceived" value="' + data[i].CCReceived + '" type="text" onchange="CheckAmt1(this)"/></td>' +
                            '<td class="text-right"><input class="text-right" id="txtmcrec_' + i + '" name="Details[' + i + '].MCReceived" value="' + data[i].MCReceived + '" type="text" onchange="CheckAmt1(this)"/></td>' +
                            '<td class="text-right"><input class="text-right" id="txttotal_' + i + '" name="Details[' + i + '].TotalAmount" value="' + data[i].TotalAmount + '" type="text"></td>' +
                            '<td class="text-right"><input class="text-right" id="txtbalance_' + i + '" name="Details[' + i + '].Balance" value="' + data[i].Balance + '" type="text"></td>' +
                            '<td class="text-right"><input class="text-right" id="txtdiscount_' + i + '" name="Details[' + i + '].Discount" value="' + data[i].Discount + '" type="text" onchange="CheckAmt1(this)"></td>' +
                            '<td> <input type="checkbox" id="chkstatus_' + data[i].StatusClose + '" class="" name="Details[' + i + '].StatusClose" />' +                            
                            '</tr>');
                        //hideLoading();
                    }

                  
                }
            });

        });
        $("#DRSNo").change(function () {
            if ($('#DRSNo').val() != $('#DRSID').attr('label')) {
                $('#DRSNo').val('');
                $('#DRSID').val('0');
                $('#DRSNo').focus();
            }

    });


        if ($("#DRSRecPayID").val() > 0) {
            if ($("#StatusEntry").val() == "BK") {
                $("#Bank").prop('checked', true);
                $("#Cash").prop('checked', false);
                $("#Bank").trigger("click");
            }
            else if ($("#StatusEntry").val() == "CS") {
                $("#Cash").prop('checked', true);
                $("#Bank").prop('checked', false);
                $("#Cash").trigger("click");
            }
            PaymentModeChange();

            var money = parseFloat($("#FMoney").val());
            $("#FMoney").val(money.toFixed(@_decimal));

            var exrate = parseFloat($("#EXRate").val());
            $("#ExRate").val(exrate.toFixed(@_decimal));
        }

        //Comma($(".aeamt").val());

        @*$('.txtNum').blur(function () {
            if (isNaN(parseInt($(this).val()))) {
                $(this).val('0.00');
            } else {
                var amt = parseFloat($(this).val());
                $(this).val(amt.toFixed(@_decimal));
            }
        });*@

        function ValidateTotal() {
            var TotalAmount = 0;
            $('#tbl1 tr').not(':first').each(function (i, obj) {
                var AmountToBeRecieved = parseFloat($(obj).find('.AmountToBeRecieved').val());
                var AmountReceived = parseFloat($(obj).find('.AmountReceived').val());


                if (isNaN(AmountToBeRecieved) == false && isNaN(AmountReceived) == false) {
                    if (AmountReceived > AmountToBeRecieved) {
                        $('#msg1').show();
                        $('#msg1').text('Amount cannot be greater than Invoice Amount.!');
                        return false;
                    } else {
                        $('#msg1').hide();
                        $('#msg1').text('');
                    }
                }

                if (isNaN(AmountReceived) == false) {
                    TotalAmount = TotalAmount + AmountReceived;
                }
            });

            var TotalInvoiceAmount = parseFloat($('.TotalInvoiceAmount').val());
            if (TotalAmount > TotalInvoiceAmount) {
                $('#msg1').show();
                $('#msg1').text('Sum of Amount cannot be greater than Total Invoice Amount!');
                return false;
            } else {
                $('#msg1').hide();
                $('#msg1').text('');
                return true;
            }
        }
        //$('#tbl1').on('blur', '.amt', function () {
        //    var result = ValidateTotal();
        //});

        $('form').submit(function (e) {
            var result = ValidateTotal();
            if (result == false) {
                e.preventDefault();
            }
        });

    });
</script>

<script>
    function Comma(Num) { //function to add commas to textboxes
        Num += '';
        Num = Num.replace(',', ''); Num = Num.replace(',', ''); Num = Num.replace(',', '');
        Num = Num.replace(',', ''); Num = Num.replace(',', ''); Num = Num.replace(',', '');
        x = Num.split('.');
        x1 = x[0];
        x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1))
            x1 = x1.replace(rgx, '$1' + ',' + '$2');
        $(".aeamt").val(x1 + x2);
    }
</script>

<script type="text/javascript">
    function chkAWBAmt(x) {
        var amt = 0;
        var obj = [];
        var invoiceid = $('#hdnEditCustomerInvoiceId').val();
        var idtext = 'atxt_' + invoiceid;
        var maxrow = parseFloat($('#hdnItemCount').val());

        $('[id^=' + idtext + ']').each(function (index, item) {

            if ($(item).val() == "") {
                $(item).val(0);
            }
            amt = amt + parseFloat($(item).val());
            $('#hTotal').html(parseFloat(amt).toFixed(@_decimal));
            if (maxrow == index) {
                if (parseFloat(amt).toFixed(@_decimal) != allocatedamount) {
                    alert('Allocate Amount should be equal to allocation of Consignment!')
                    return;
                }

            }
        });
    }
    function CheckAmt(x) {
        debugger;
        var thisval = $(x).val();
        $(x).attr('value', thisval);
        thisval = $(x).val();
        if (thisval == null || thisval == "") {
            $(x).val('0.00');
        } else {
            $(x).val(parseFloat(thisval).toFixed(@_decimal));
        }
        var curror = $(x).parent("td").parent("tr");
        var exactamt = $(curror).find("td").eq(5).text();
        var amt = parseFloat($(curror).find("td").eq(5).text());
        var allocateamt = parseFloat($(curror).find("td").eq(6).find(".amt").val());
        if (exactamt.trim() == null || exactamt.trim()  == "") {
            $(curror).find("td").eq(6).find(".amt").val("0.00");
        } else {
            if (allocateamt > amt) {
                $(curror).find("td").eq(6).find(".amt").val(parseFloat(amt).toFixed(@_decimal));
            }
            else {
                $(curror).find("td").eq(6).find(".amt").val(parseFloat(allocateamt).toFixed(@_decimal));
            }
        }
        ValidateTotal();
    }

    function CheckAmt1(x) {
        var thisval = $(x).val();
        $(x).attr('value', thisval);
        thisval = $(x).val();
        if (thisval == null || thisval == "") {
            $(x).val('0.000');
        } else {
            $(x).val(parseFloat(thisval).toFixed(@_decimal));
        }
       
    }
   
    
   
    function PaymentModeChange() {
        var val = $("#PaymentMode").val();
        if (val == 1) {
            $("#divCash").css({ "display": "none" });
            $("#divBank").css({ "display": "block" });
            $("#ChequeNo").attr('required', 'required');
            $("#ChequeDate").attr('required', 'required');
            $('#CashBank').removeAttr('required', 'required');
            $('#ChequeBank').attr('required', 'required');
        } else {
            $("#divBank").css({ "display": "none" });
            $("#divCash").css({ "display": "block" });
            $("#ChequeNo").removeAttr('required');
            $("#ChequeDate").removeAttr('required');
            $("#ChequeNo").attr('readonly', 'readonly');
            $("#ChequeDate").attr('readonly','readonly')
            $('#CashBank').attr('required','required');

            $('#ChequeBank').removeAttr('required')
        }

    }
</script>

<section class="content-header">
    <div class="row">
        <div class="col-md-5 pull-left">
            <h1 class="headingfont">@ViewBag.Title</h1>
        </div>
        <div class="col-md-5 pull-right text-right">
            <h2 class="awb" id="h2awb"><strong>@ViewBag.AWBNo</strong></h2>
            @*<h5>Delivered</h5>*@
            <h4 class="text-right" id="h4statustype" style='color:#07a7e3!important'>@ViewBag.StatusType</h4><h5 class="pull-right" id="h4courierstatus" style='color:red'>@ViewBag.CourierStatus</h5>
            <div class="pull-right setting">
                <div class="navbar-custom-menu" id="divsetting">
                    <ul class="nav navbar-nav">

                        <!-- User Account Menu -->
                        <li class="dropdown user user-menu">
                            <!-- Menu Toggle Button -->

                            <ul class="dropdown-menu extended logout" style="top:0%!important">
                                <li><a style="color:#35b8eb;cursor:pointer" onclick="Printreceipt(1)">Print</a></li>
                                <li><a style="color:#35b8eb;cursor:pointer" onclick="ShowStaffNotes()">Staff Notes</a></li>
                                <li><a style="color:#35b8eb;cursor:pointer" onclick="ShowCustomerNotification()">Customer Notification</a></li>
                            </ul>
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                <i style="font-size: 30px;color:#35b8eb;padding-top: 11px;" class="fa fa-cog"></i>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    </div>
    <div class="row">

    </div>
</section>

<!-- Main content -->
<section class="content">
    @using (Html.BeginForm("Create", "DRSReceipt", FormMethod.Post, new { @id = "FormReceipt" }))
    {
        @Html.ValidationSummary(true)

        @Html.HiddenFor(model => model.DRSRecPayID)
        @Html.HiddenFor(model => model.StatusEntry)
        @Html.HiddenFor(model => model.AcJournalID)
        <div class="row no-margin" style="padding: 10px;margin-bottom: 10px;border: 1px solid #07a7e3;margin-bottom: 10px !important">
            <div class="col-xs-12 col-sm-2">
                <label class="headinglabel">DRS Receipt No.</label>
                @Html.TextBoxFor(model => model.DocumentNo, new { @class = "form-control" })

            </div>
            <div class="col-xs-12 col-sm-2">
                <label class="headinglabel">Date</label>
                @Html.TextBoxFor(model => model.DRSRecPayDate, new { @class = "form-control text-right", @required = true })
            </div>

            <div class="col-xs-12 col-sm-2">
                <label class=" required headinglabel">DRS No.</label>
                @Html.TextBoxFor(model => model.DRSNo, new { @class = "form-control" })
                @Html.HiddenFor(mode => Model.DRSID)
            </div>
            <div class="col-xs-12 col-sm-2">
                <label class="headinglabel required">Deliverd By</label>
                @Html.DropDownListFor(model => model.DeliveredBy, new SelectList(ViewBag.Deliverdby, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
            </div>
            <div class="col-xs-12 col-sm-1">
                <label class="headinglabel required">DRS Date</label>
                @Html.TextBoxFor(model => model.DRSDate, new { @class = "form-control" })
            </div>
            <div class="col-xs-2 col-sm-2">
                <label class="headinglabel">DRS Amount</label>
                @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
            </div>
            <div class="col-md-1">
                <button class="btn btn-primary" type="button" id="btnsearch" style="margin-top:33px;width: 60px!Important;min-width: 50px!important;"><i class="fa fa-refresh" aria-hidden="true"></i> </button>
            </div>
        </div>
        <div class="row no-margin" style="padding:10px;border:1px solid #07a7e3;margin-bottom:10px!important">
            <div class="col-md-2">
                <label class="headinglabel">Total Receipt</label>
                @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Total Reconciled</label>
                @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Excess/Shortage</label>
                @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Chart of Account</label>
                @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
            </div>
            <div class="col-md-4">
                <label class="headinglabel">Remarks</label>
                @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
            </div>
        </div>

        <div class="row no-margin" style="padding-top:10px">
            <div class="col-xs-12 col-sm-3 col-md-3">
                <div class="row no-margin" style="padding-top:10px">
                    <label class="headinglabel">Transaction Type</label>
                    <select id="PaymentMode" class="form-control">
                        <option value="1">AWB</option>
                        <option value="2">New AWB</option>
                        <option value="3">Invoice</option>
                        <option value="4">Cash Receipt</option>
                        <option value="4">Bank Receipt</option>
                        <option value="5">Expense</option>
                    </select>
                </div>
                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-xs-12 col-sm-6">
                        <label class=" required headinglabel">Cheque No.</label>
                        @Html.TextBoxFor(model => model.ChequeNo, new { @class = "form-control textright", @required = true })

                    </div>
                    <div class="col-xs-12 col-sm-6">
                        <label class=" required headinglabel">Cheque Date</label>

                        @Html.TextBoxFor(model => model.ChequeDate, new { @class = "form-control text-right", @required = true })

                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-3">
                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-xs-12 col-sm-6">
                        <label class="headinglabel">AWB No.</label>
                        @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
                    </div>
                    <div class="col-xs-12 col-sm-6">
                        <label class="headinglabel">AWB Date</label>
                        @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
                    </div>
                </div>
                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-xs-12 col-sm-6">
                        <label class="headinglabel">Invoice No.</label>
                        @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
                    </div>
                    <div class="col-xs-12 col-sm-6">
                        <label class="headinglabel">Invoice Date</label>
                        @Html.TextBoxFor(model => model.DRSAmount, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-6">
                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-xs-12 col-sm-6">
                        <label class=" required headinglabel">Customer</label>
                        @Html.DropDownListFor(model => model.CashBank, new SelectList(@ViewBag.achead, "AcHeadID", "AcHead"), "Select", new { @class = "form-control" })
                    </div>
                    <div class="col-xs-12 col-sm-6">
                        <label class=" required headinglabel">Chart of Account</label>
                        @Html.DropDownListFor(model => model.CashBank, new SelectList(@ViewBag.achead, "AcHeadID", "AcHead"), "Select", new { @class = "form-control" })
                    </div>
                </div>
                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-xs-12 col-sm-6">
                        <label class=" required headinglabel">Debit/Credit</label>
                        @Html.TextBoxFor(model => model.ReceivedAmount, new { @class = "form-control aamt textright TotalInvoiceAmount", required = "required" })
                    </div>
                    <div class="col-xs-12 col-sm-6">
                        <label class="headinglabel">Remarks</label>
                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control txttarget" })
                    </div>
                </div>
            </div>
        </div>        
        <div class="row no-margin" style="padding-top:10px">
            <div class="col-xs-12 no-padding for-device">
                <div class="data-table payment-div">
                    <div class="data">
                        <table border="1" style="margin-top: 15px; " class="table table-bordered table-responsive">
                            <thead>
                                <tr style="font-weight: bold">
                                    <th>AWB No.</th>
                                    <th>AWB Date</th>
                                    <th>Courier Charge</th>
                                    <th>MC Amount</th>
                                    <th>CC Received</th>
                                    <th>MC Received</th>
                                    <th>Total Amount</th>
                                    <th>OutStanding</th>
                                    <th>Discount</th>
                                    <th>Status</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="tbl1">
                                @if (Model.DRSRecPayID > 0)
                                {
                                    for (int i = 0; i < Model.Details.Count; i++)
                                    {

                                        <tr>

                                            <td>
                                                <div class="data1">
                                                    @*@Model.CostUpdationDetails[i].JobCode*@
                                                    @Model.Details[i].InScanID
                                                    @Html.HiddenFor(item => @Model.Details[i].AWBNO)

                                                </div>
                                            </td>

                                            <td>
                                                <div class="data1">
                                                    @*@Model.CostUpdationDetails[i].JobCode*@
                                                    @if (@Model.Details[i].AWBDate != null)
                                                    {
                                                        @CMSV2.Models.CommanFunctions.GetShortDateFormat(@Model.Details[i].AWBDate)
                                                        @Html.HiddenFor(item => @Model.Details[i].AWBDate)
                                                    }
                                                    else
                                                    {
                                                        @Model.Details[i].AWBDate
                                                        @Html.HiddenFor(item => @Model.Details[i].AWBDate)
                                                    }
                                                </div>
                                            </td>

                                            <td style="text-align:right;">
                                                <div class="data1">
                                                    @Html.HiddenFor(item => @Model.Details[i].CourierCharge, new { @Class = "AmountToBeRecieved" })
                                                    @string.Format("{0:n3}", @Model.Details[i].CourierCharge)
                                                </div>
                                            </td>

                                            <td style="text-align:right;">
                                                @Html.HiddenFor(item => @Model.Details[i].MaterialCost, new { @Class = "AmountToBePaid" })
                                                @string.Format("{0:n3}", @Model.Details[i].MaterialCost)
                                            </td>
                                            <td style="text-align:right;">
                                                @Html.TextBoxFor(item => @Model.Details[i].CCReceived, string.Format("{0:n3}", @Model.Details[i].CCReceived), new { @class = "amt1 txtNum text-right AdjustmentAmount", onchange = "CheckAmt1(this)", @id = "txtadjust_" + Model.Details[i].InScanID })
                                            </td>
                                            <td style="text-align:right;">
                                                @Html.TextBoxFor(item => item.Details[i].MCReceived, string.Format("{0:n3}", @Model.Details[i].MCReceived), new { @class = "amt txtNum text-right Amount", @id = "txtccreceived_" + @Model.Details[i].InScanID, onchange = "CheckAmt(this)" })
                                            </td>
                                            <td>
                                                <input type="text" class="form-control" />
                                            </td>
                                            <td>
                                                <input type="text" class="form-control" />
                                            </td>
                                            <td>
                                                <input type="text" class="form-control" />
                                            </td>
                                            <td>
                                            </td>
                                        </tr>

                                    }
                                }



                    </div>
                </div>
            </div>
        </div>
        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12 btn-right">
                @if (Model.DRSRecPayID > 0)
                {
                    <input type="submit" class="btn btn-primary  btnwidth" value="Update" />
                }
                else
                {
                    <input type="submit" class="btn btn-primary  btnwidth" value="Save" name="Command" />
                }
                <a href='@Url.Action("Index", "DRSReceipt", new { id = 0 })' class="btn btn-danger  btnwidth">Cancel</a>
            </div>
        </div>


    }
</section>


<div>
</div>

<script type="text/javascript">
     function ValidateTotal() {
        debugger;
            var TotalAmount = 0;
            var idtext = 'txtinvoice_';
        var amt = 0;
        if ($('#Balance').val() == "") {
            $('#Balance').val(0);
        }
        var balance =parseFloat($('#Balance').val());

            $('[id^=' + idtext + ']').each(function (index, item) {
              //  var id = $(item).attr('id').split('_')[1];
                if ($(item).val() == "" || $(item).val()==null) {
                    $(item).val(0);
                }
                var paidamount = parseFloat($(item).val());
                amt = amt + paidamount;

                if (parseFloat(amt) == 0) {
                    $('#btnsave').attr('disabled', 'disabled');
                }

                @*if (parseFloat($('#FMoney').val()) == 0) {
                    $('#FMoney').val(parseFloat(amt).toFixed(@_decimal))
                }*@
                $('#AllocatedAmount').val(parseFloat(amt).toFixed(@_decimal));
                var payingamount = parseFloat($('#FMoney').val());
                var allocatedamount = parseFloat($('#AllocatedAmount').val());
                var advance = 0;
                if (allocatedamount > (payingamount + advance)) {
                    $('#btnsave').attr('disabled', 'disabled');
                }
                else if (parseFloat(amt) == 0) {
                    $('#btnsave').attr('disabled', 'disabled');
                }
                else {
                    $('#btnsave').removeAttr('disabled');
                }

                //$('#Balance').val(parseFloat(advance).toFixed(@_decimal));

            });

            //var TotalInvoiceAmount = parseFloat($('.TotalInvoiceAmount').val());
            //if (TotalAmount > TotalInvoiceAmount) {
            //    $('#msg1').show();
            //    $('#msg1').text('Sum of Amount cannot be greater than Total Invoice Amount');
            //    return false;
            //} else {
            //    return true;
            //}
        }
    // When the document is ready

    $(document).ready(function () {
        var startdate = '@Session["FyearFrom"].ToString()';
        var enddate = '@Session["FyearTo"].ToString()';
        var sd = new Date(startdate);
        var ed = new Date(enddate);
        var datevalid = false;
        var dateerror = "";

        $('#DRSRecPayDate').datetimepicker({
            format: 'DD-MM-YYYY'
        });
        $('#ChequeDate').datetimepicker({
            format: 'DD-MM-YYYY'
        });

          $('#RecPayDate').keydown(function (e) {

            if (e.keyCode == 13 || e.keyCode == 9) {
                if ($("#RecPayDate").val() != "") {
                    $.ajax({
                        url: "@Url.Action("CheckDateValidate", "Accounts")",
                        data: { entrydate: $("#RecPayDate").val() },
                        type: "GET",
                        dataType: "json",
                        success: function (response) {

                            if (response.Status == "OK") {
                                datevalid = true;
                                dateerror = response.Message;
                            }
                            else {
                                datevalid = false;
                                dateerror = response.Message;
                                $('#RecPayDate').val(response.ValidDate);
                            }

                        },
                        error: function () {
                            alert("Failed! Please try again.");
                        }
                    });
                }
            }
        });
        $('#RecPayDate').change(function ()    {

            if ($("#RecPayDate").val() != "") {
                 $.ajax({
                url: "@Url.Action("CheckDateValidate", "Accounts")",
                     data: { entrydate: $("#RecPayDate").val()},
                type: "GET",
                dataType: "json",
                     success: function (response) {
                    if (response.Status == "OK") {
                        datevalid = true;
                        dateerror = response.Message;
                    }
                    else {
                        datevalid = false;
                        dateerror = response.Message;
                        $('#RecPayDate').val(response.ValidDate);
                        alert(dateerror);
                    }

                },
                error: function () {
                    alert("Failed! Please try again.");
                }
            });
            }
        });

        $('#RecPayDate').on('dp.change', function (e) {
            $('#RecPayDate').trigger('change');
        })

        $('#RecPayDate').datepicker("setDate", new Date());


    });

</script>
