@model CMSV2.Models.QuickAWBVM
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    var _decimal = Convert.ToInt32(@Session["Decimal"].ToString());
    var _mindate = @CMSV2.Models.CommanFunctions.GetMinFinancialDate(); //'2020/01/01',
    var _maxdate = @CMSV2.Models.CommanFunctions.GetMaxFinancialDate();
    int otherchargecount = 0;


}
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />
<style>
    /*.ui-autocomplete {
    z-index: 100;
    }*/

    .deleteallocrow {
        color: red !important;
    }

    .fa fa-times {
    }

    .ui-autocomplete {
        position: absolute;
        cursor: default;
        z-index: 1001 !important
    }

    .autocomplete:focus {
        background-color: #dbffcf;
    }

    .form-control {
        height: 30px !important;
    }

    .bg_box, .bg_box1 {
        padding: 5px 0;
    }

        .bg_box h3, .bg_box1 h3, {
            margin-bottom: 5px;
        }


    /*.detailBox:nth-of-type(2) .bg_box{
            background: #f3fef0;
        }*/
    .charges {
        border: 1px solid #ccc;
        width: 100%;
    }

    .inline_checkbox div {
        padding-right: 15px;
    }

        .inline_checkbox div input[type="checkbox"] {
            margin-right: 0 !important;
        }

    .charges td label {
        color: #0997d0 !important;
        font-weight: bold;
    }

    .charges td, .charges th {
        padding: 5px;
        border-right: 1px solid #ccc;
        border-bottom: 1px solid #ccc;
    }

    .form-control {
        border-radius: 5px !important;
    }

    .flexTitle {
        display: flex;
        justify-content: space-between;
    }

    h3 {
        margin: 5px 0;
        font-size: 19px;
        font-weight: bold;
    }

    hr {
        margin-top: 5px;
        margin-bottom: 5px;
        font-size: 20px;
    }

    #DeleteAllocationRow {
        color: #dd4b39 !important;
    }

    #AllocationClose {
        color: #fff;
        background-color: #3e3f3f !important;
        border-radius: 5px;
        border: 0;
        font-size: 14px;
    }
</style>

<script>
    //Location Autocomplete code
    $(document).ready(function () {
        //ConsignorLocationName
        $("#ConsignorLocationName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("GetEventVenuesList", "ZoneChart")",
                    data: { SearchText: request.term },
                    dataType: "json",
                    type: "GET",
                    success: function (data) {
                        if (data.length == 0) {
                            //$('#EventVenueId').val("");
                            //$('#VenueLocationMesssage').show();
                            return false;
                        }
                        else {
                            response($.map(data, function (item) {
                                return {
                                    label: item.description,
                                    value: item.place_id
                                }
                            }));
                        }
                    },
                    error: function (x, y, z) {
                        alert('error');
                    }
                });
            },
            messages: {
                noResults: "", results: ""
            },
            select: function (event, ui) {
                $('#ConsignorLocationName').val(ui.item.label);
                $('#ConsignorLocationName').attr('PlaceId',ui.item.value);
                return false;
            },
            focus: function (event, ui) {
                $('#ConsignorLocationName').val(ui.item.label);
                $('#ConsignorLocationName').attr('PlaceId', ui.item.value);
                return false;
            }
        });
        //ConsigneeLocationName
        $("#ConsigneeLocationName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("GetEventVenuesList", "ZoneChart")",
                    data: { SearchText: request.term },
                    dataType: "json",
                    type: "GET",
                    success: function (data) {
                        if (data.length == 0) {
                            //$('#EventVenueId').val("");
                            //$('#VenueLocationMesssage').show();
                            return false;
                        }
                        else {
                            response($.map(data, function (item) {
                                return {
                                    label: item.description,
                                    value: item.place_id
                                }
                            }));
                        }
                    },
                    error: function (x, y, z) {
                        alert('error');
                    }
                });
            },
            messages: {
                noResults: "", results: ""
            },
            select: function (event, ui) {
                $('#ConsigneeLocationName').val(ui.item.label);
                $('#ConsigneeLocationName').attr('PlaceId',ui.item.value);
                return false;
            },
            focus: function (event, ui) {
                $('#ConsigneeLocationName').val(ui.item.label);
                $('#ConsigneeLocationName').attr('PlaceId', ui.item.value);
                return false;
            }
        });

        $('#ConsignorLocationName').blur(function () {

            $.ajax({
                type: "GET",
                url: "/ZoneChart/GetVenueDetailsByPlace",
                datatype: "Json",
                data: { placeId: $('#ConsignorLocationName').attr('PlaceId') },
                success: function (response) {
                    debugger;
                    // console.log(response);
                    $('#ConsignorCountryName').val(response.Country);
                    $('#ConsignorCityName').val(response.City);
                    if ($("#PickupLocation").val() == '') {
                        $("#PickupLocation").val($('#ConsignorLocationName').val());
                        $('#PickupLocationPlaceId').val($("#PickupLocation").attr('PlaceId'));
                        $('#OriginCountry').val(response.Country);
                        $('#OriginCity').val(response.City);                        
                        $('#PickupSubLocality').val(response.SubLocality);
                        getMovementType();
                    }

                    
                }
            });
        });

        $('#ConsigneeLocationName').blur(function () {

            $.ajax({
                type: "GET",
                url: "/ZoneChart/GetVenueDetailsByPlace",
                datatype: "Json",
                data: { placeId: $('#ConsigneeLocationName').attr('PlaceId') },
                success: function (response) {
                    debugger;
                    // console.log(response);
                    $('#ConsigneeCountryName').val(response.Country);
                    $('#ConsigneeCityName').val(response.City);
                    if ($("#DeliveryLocation").val() == '') {
                        $("#DeliveryLocation").val($('#ConsigneeLocationName').val());
                        $('#DeliveryLocationPlaceId').val($('#ConsigneeLocationName').attr('PlaceId'));
                        $('#DeliveryCountry').val(response.Country);
                        $('#DeliveryCity').val(response.City);
                        $('#DeliverySubLocality').val(response.SubLocality);
                        getMovementType();
                    }

                }
            });
        });
        $("#PickupLocation").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("GetEventVenuesList", "ZoneChart")",
                    data: { SearchText: request.term },
                    dataType: "json",
                    type: "GET",
                    success: function (data) {
                        if (data.length == 0) {
                            //$('#EventVenueId').val("");
                            //$('#VenueLocationMesssage').show();
                            return false;
                        }
                        else {
                            response($.map(data, function (item) {
                                return {
                                    label: item.description,
                                    value: item.place_id
                                }
                            }));
                        }
                    },
                    error: function (x, y, z) {
                        alert('error');
                    }
                });
            },
            messages: {
                noResults: "", results: ""
            },
            select: function (event, ui) {
                $('#PickupLocation').val(ui.item.label);
                $('#PickupLocationPlaceId').val(ui.item.value);
                return false;
            },
            focus: function (event, ui) {
                $('#PickupLocation').val(ui.item.label);
                $('#PickupLocationPlaceId').val(ui.item.value);
                return false;
            }
        });
            $("#DeliveryLocation").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("GetEventVenuesList", "ZoneChart")",
                    data: { SearchText: request.term },
                    dataType: "json",
                    type: "GET",
                    success: function (data) {
                        if (data.length == 0) {
                            //$('#EventVenueId').val("");
                            //$('#VenueLocationMesssage').show();
                            return false;
                        }
                        else {
                            response($.map(data, function (item) {
                                return {
                                    label: item.description,
                                    value: item.place_id
                                }
                            }));
                        }
                    },
                    error: function (x, y, z) {
                        alert('error');
                    }
                });
            },
            messages: {
                noResults: "", results: ""
            },
            select: function (event, ui) {
                $('#DeliveryLocation').val(ui.item.label);
                $('#DeliveryLocationPlaceId').val(ui.item.value);
                return false;
            },
            focus: function (event, ui) {
                $('#DeliveryLocation').val(ui.item.label);
                $('#DeliveryLocationPlaceId').val(ui.item.value);
                return false;
            }
        });
        ///.autocomplete("widget").addClass("CitiesAutocomplete");



            $('#DeliveryLocation').change(function () {
                $.ajax({
                    type: "GET",
                    url: "/ZoneChart/GetVenueDetailsByPlace",
                    datatype: "Json",
                    data: { placeId: $('#DeliveryLocationPlaceId').val() },
                    success: function (response) {
                        debugger;
                        // console.log(response);
                        $('#DeliveryCountry').val(response.Country);
                        $('#DeliveryCity').val(response.City);
                        $('#DeliverySubLocality').val(response.SubLocality);
                        if ($('#PaymentModeId').val() == 5) //prepaid
                        {
                            if ($('#DeliveryCountry').val() != '' && $('#DeliveryCountry').val() != $('#DeliveryCountry').attr('awbcountry')) {
                                $.notify('Delivery coutry not matched with awb paid Country!');
                                $('#DeliveryLocation').val('');
                                $('#DeliveryLocation').focus();
                            }
                        }
                        else {
                            getMovementType();
                            getCourierCharge();
                        }
                    }
                });



            });
            $('#PickupLocation').change(function () {

                $.ajax({
                    type: "GET",
                    url: "/ZoneChart/GetVenueDetailsByPlace",
                    datatype: "Json",
                    data: { placeId: $('#PickupLocationPlaceId').val() },
                    success: function (response) {
                        debugger;
                        // console.log(response);
                        $('#OriginCountry').val(response.Country);
                        $('#OriginCity').val(response.City);
                        $('#PickupSubLocality').val(response.SubLocality);
                        if ($('#PaymentModeId').val() == 5) //prepaid
                        {
                            if ($('#OriginCountry').val() != '' && $('#OriginCountry').val() != $('#OriginCountry').attr('awbcountry')) {
                                $.notify('Pickup Country not matched with awb pickup Country!');
                                $('#PickupLocation').val('');
                                $('#PickupLocation').focus();
                            }
                        }
                        else {
                            getMovementType();
                            getCourierCharge();
                        }
                    }
                });



            });

    })
</script>
<script type="text/javascript">
    function LoadCustomerDetail() {
        if ($('#CustomerID').val() > 0) {
            $.ajax({
                type: "POST",
                url: "/PickUpRequest/GetCustomerData",
                datatype: "Json",
                data: { id: $('#CustomerID').val() },
                success: function (data) {
                    $("#custcode").val(data.CustCode);
                    $("#Consignor").val(data.CustName);
                    $("#ConsignorContact").val(data.ContactPerson);
                    $("#ConsignorAddress1_Building").val(data.Address1);
                    $("#ConsignorAddress2_Street").val(data.Address2);
                    $("#ConsignorAddress3_PinCode").val(data.Address3);

                    $("#ConsignorPhone").val(data.Phone);
                    $("#ConsignorCountryName").val(data.CountryName);
                    $("#ConsignorCityName").val(data.CityName);
                    $("#ConsignorLocationName").val(data.LocationName);
                    $("#OfficeTimeFrom").val(data.OfficeOpenTime);
                    $("#OfficeTimeTo").val(data.OfficeCloseTime);
                    $("#hdnCustomerType").val(data.CustomerType);

                }
            });
        }
    }
    function CalculateTax() {
        debugger;
        var tax = $('#ChkTaxPercent').prop('checked');
        if (tax == true) {
            //$('#lblTaxPercent').removeClass('hide');
            var taxpercent = parseFloat($('#TaxPercent').val());
            if ($('#CourierCharge').val() == '' || $('#CourierCharge').val() == null)
                $('#CourierCharge').val(0);
            if ($('#OtherCharge').val() == '' || $('#OtherCharge').val() == null)
                $('#OtherCharge').val(0);

            var charge = parseFloat($('#CourierCharge').val()) + parseFloat($('#OtherCharge').val());

            var taxval = parseFloat(charge) * (parseFloat(taxpercent) / 100.00);
            $('#TaxAmount').val(parseFloat(taxval).toFixed(2));
            var net = parseFloat(charge) + parseFloat(taxval)
            $('#totalCharge').val(parseFloat(net).toFixed(2));
        }
        else {
            var taxpercent = 0;
            if ($('#CourierCharge').val() == '' || $('#CourierCharge').val() == null)
                $('#CourierCharge').val(0);
            if ($('#OtherCharge').val() == '' || $('#OtherCharge').val() == null)
                $('#OtherCharge').val(0);

            var charge = parseFloat($('#CourierCharge').val()) + parseFloat($('#OtherCharge').val());

            var taxval = 0;
            $('#TaxAmount').val(parseFloat(taxval).toFixed(2));
            var net = parseFloat(charge) + parseFloat(taxval)
            $('#totalCharge').val(parseFloat(net).toFixed(2));
        }


    }
    //customer and shipper autocomplete
    $(document).ready(function () {
        //paymenttype change
        $('#PaymentModeId').change(function () {
            debugger;
            var modeid = $('#PaymentModeId').val();
            if (modeid == 1) { //PKP
                $('#divcustomer').addClass('hide');
                $('#divcash').removeClass('hide');
                $('#AcHeadName').removeAttr('readonly');
                $('#AcHeadName').attr('required', 'required');
                $('#shippername').removeAttr('readonly');
            }
            else {
                $('#divcustomer').removeClass('hide');
                $('#divcustomer').removeClass('hide');
                $('#divcash').addClass('hide');
                $('#AcHeadName').removeAttr('required');
            }

            if (modeid == 1 || modeid == 2 || modeid == 4) { //PKP COD FOC
                $("#customer").attr("readonly", "readonly");
                $('#shippername').removeAttr('readonly');
                $("#CustomerandShipperSame").attr("disabled", "disabled");
                if (modeid == 1) { //cash
                    $('#customer').val($('#CASHCustomerName').val());
                    $('#CustomerID').val($('#CASHCustomerId').val());
                    $('#AcHeadName').focus();
                }
                else if (modeid == 2) 
                { //cod
                    $('#customer').val($('#CODCustomerName').val());
                    $('#CustomerID').val($('#CODCustomerID').val());
                    $('#shippername').focus();
                }
                else if (modeid == 4) { //FOC
                    $('#customer').val($('#FOCCustomerName').val());
                    $('#CustomerID').val($('#FOCCustomerID').val());
                    $('#shippername').focus();
                }
                
               // fillcustomerdetail(modeid);

            }
            else {
                if ($('#CustomerID').val() == $('#CASHCustomerId').val() || $('#CustomerID').val() == $('#CODCustomerID').val())
                {
                    $('#customer').val('');
                    $('#CustomerID').val(0);
                }
                $("#customer").removeAttr("readonly");
                $("#CustomerandShipperSame").removeAttr("disabled", "disabled");
                $("#customer").focus();
            }
           
            //if ($('#CustomerID').val() == 0 && modeid != 1) {
            //    alert("For New Cash Customer....Selected Payment Type is not allowed");
            //    $('#PaymentModeId').val(1).trigger('change');
            //}
            //else {

            //    if ($("#hdnCustomerType").val() == "CS"  && modeid != 1) {
            //        //alert("Not a Credit Customer....Selected Payment Type is not allowed");
            //        alert("For Cash Customer....Selected Payment Type is not allowed");
            //        $('#PaymentModeId').val(1).trigger('change');
            //    }
            //}

        });

        $("#customer").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/AWB/GetCustomerName',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {                            
                            return {
                                label: val.CustomerName,
                                value: val.CustomerName,
                                CustomerId: val.CustomerID,
                                type: val.CustomerType
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#customer').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#customer").val(i.item.label);
                $('#CustomerID').val(i.item.CustomerId);
                $('#hdnCustomerType').val(i.item.type);
            },

        });
        $('#customer').change(function () {
            if ($("#CustomerandShipperSame").is(':checked')) {
                $("#shippername").val($('#customer').val());
                $("#shippername").attr('readonly', 'readonly');
                LoadCustomerDetail();
            }
        })
        //checkbox check to load credit customer address for shipper
        $("#CustomerandShipperSame").click(function () {
            if ($("#CustomerandShipperSame").is(':checked')) {
                $("#shippername").val($('#customer').val());
                $("#shippername").attr('readonly', 'readonly');
                LoadCustomerDetail();
            }
            else {

                $("#shippername").removeAttr('readonly');
                $("#shippername").val('');
                $("#ConsignorContact").val('');
                $("#ConsignorAddress1_Building").val('');
                $("#ConsignorAddress2_Street").val('');
                $("#ConsignorAddress3_PinCode").val('');

                $("#ConsignorPhone").val('');
                $("#ConsignorCountryName").val('');
                $("#ConsignorCityName").val('');
                $("#ConsignorLocationName").val('');
                $("#OfficeTimeFrom").val('');
                $("#OfficeTimeTo").val('');

            }
        });

        $("#shippername").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/AWBBatch/GetShipperName',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.ShipperName,
                                value: val.ShipperName,
                                AcHeadID: val.AcHeadID,
                                ContactPerson: val.ContactPerson,
                                Address1: val.Address1,
                                Address2: val.Address2,
                                Pincode: val.PinCode,
                                Phone: val.Phone,
                                CountryName: val.CountryName,
                                CityName: val.CityName,
                                LocationName: val.LocationName,

                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#shippername').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#shippername").val(i.item.label);
                $("#ConsignorContact").val(i.item.ContactPerson);
                $("#ConsignorAddress1_Building").val(i.item.Address1);
                $("#ConsignorAddress2_Street").val(i.item.Address2);

                $("#ConsignorAddress3_PinCode").val(i.item.Pincode);

                $("#ConsignorPhone").val(i.item.Phone);
                $("#ConsignorCountryName").val(i.item.CountryName);
                $("#ConsignorCityName").val(i.item.CityName);
                $("#ConsignorLocationName").val(i.item.LocationName);

            },

        });
        $("#Consignee").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/AWBBatch/GetReceiverName', //'/AWB/GetConsigneeName',
                    datatype: "json",
                    data: {
                        term: request.term, Shipper: $('#shippername').val(),ShowAll:$('#ShowAllConsignee').prop('checked')
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.Name,
                                value: val.Name,
                                ContactPerson: val.ContactPerson,
                                Address1: val.Address1,
                                Address2: val.Address2,
                                Pincode: val.PinCode,
                                Phone: val.Phone,
                                CountryName: val.CountryName,
                                CityName: val.CityName,
                                LocationName: val.LocationName,

                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#Consignee').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#Consignee").val(i.item.label);
                $("#ConsigneeContact").val(i.item.ContactPerson);
                $("#ConsigneeAddress1_Building").val(i.item.Address1);
                $("#ConsigneeAddress2_Street").val(i.item.Address2);

                $("#ConsigneeAddress3_PinCode").val(i.item.Pincode);
                $("#ConsigneePhone").val(i.item.Phone);
                $("#ConsigneeCountryName").val(i.item.CountryName);
                $("#ConsigneeCityName").val(i.item.CityName);
                $("#ConsigneeLocationName").val(i.item.LocationName);

            },

        });



        var accounturl = '/Accounts/GetHeadsForCash';

        $("#AcHeadName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: accounturl,
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                AcHeadID: val.AcHeadID
                            }
                        }))
                    }
                })
            }, minLength: 0,
            focus: function (event, i) {
                $("#AcHeadName").val(i.item.label);
                $('#AcheadID').val(i.item.AcHeadID);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#AcHeadName").val(i.item.label);
                $('#AcheadID').val(i.item.AcHeadID);

            }
        });

        //setTimeout(function () {
        //    $('#PaymentModeId').trigger('change');
        //}, 500)

    });

</script>
<script type="text/javascript">
    function noaction() {
        alert("Page under development!");
    }
    
    
     function setTwoNumberDecimal(obj) {

         $(obj).val(parseFloat($(obj).val()).toFixed(@_decimal));
         CalculateTax();
    }
    function setThreeNumberDecimal(obj) {

        if ($(obj).val() == '') {
            $(obj).val(0);
        }
        else {
            $(obj).val(parseFloat($(obj).val()).toFixed(3));
        }

}
    function isNumberKey(evt)
       {
          var charCode = (evt.which) ? evt.which : evt.keyCode;
          if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
             return false;

          return true;
    }
    function isNumberKey1(evt)
       {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
          //if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
          if (charCode!=8 && charCode!=0 && (charCode < 48 || charCode > 57))
             return false;

          return true;
    }
    function AddCharge() {
        alert($('#OtherChargeID').val());
        alert($('#txtotherchargeamt_99').val());
    }
    function UpdateCharge(index) {
        alert($('#othercharges_' + index + '__OtherChargeID').val());
        alert($('#txtotherchargeamt_'+index).val());


    }

    function ShowOtherChargesModal() {
        $('#OtherChargesModal').modal('show');
    }
    function ShowStatusModal() {

          $.ajax({
            type: "POST",
            url: "/AWB/GetActiveStatus",
            datatype: "Json",
            data: { 'InScanID': $('#InScanID').val() },
            success: function (response) {                                
                var _detail = response.data;              
                //$('#ChangeStatusTypeId').val(0).tigger('change');
                $('#ChangeStatusTypeId').val(_detail.StatusTypeID).trigger('change');
                //if (_detail.CourierStatusID != null)
                //$('#ChangeCourierStatusId').val(_detail.CourierStatusID);

                 $('#StatusModal').modal('show');

            }
        });

    }

    //not in use
     function GetConsigneeDetail() {

         $.ajax({
             type: "POST",
             url: "/PickUpRequest/GetConsigneeData",
             datatype: "Json",
             data: { consigneename: $('#Consignee').val() },
                success: function (data) {
                    if (data != null && data.CustName!=null) {
                        $("#Consignee").val(data.CustName);
                        $("#ConsigneeContact").val(data.ContactPerson);
                         $("#ConsigneeAddress1_Building").val(data.Address1);
                        $("#ConsigneeAddress2_Street").val(data.Address2);
                       $("#ConsigneeAddress3_PinCode").val(data.Address3);
                        $("#ConsigneePhone").val(data.Phone);
                        $("#ConsigneeCountryName").val(data.CountryName);
                        $("#ConsigneeCityName").val(data.CityName);
                        $("#ConsigneeLocationName").val(data.LocationName);




                    }
                    else {
                        
                        $("#ConsigneeContact").val('');
                        $("#ConsigneeAddress1_Building").val('');
                        $("#ConsigneeAddress2_Street").val('');
                        $("#ConsigneeAddress3_PinCode").val('');
                        $("#ConsigneePhone").val('');
                        $("#ConsigneeCountryName").val('');
                        $("#ConsigneeCityName").val('');
                        $("#ConsigneeLocationName").val('');
                    }
                }
            });

    }

    function ShowNotification() {
        GetCustomerNotification();
        $('#CustomerNotifiyModal').modal('show');

    }
    function ShowStaffNotes() {
        GetStaffNotes();
        $('#StaffNotesModal').modal('show');

    }

    function savestaffnotes() {

        var obj = {
            'NotesId': $('#hdnStaffNotesId').val(),
            'InScanId': $('#InScanID').val(),
            'Notes': $('#staffnotes').val()
        }

        $.ajax({
            type: "POST",
            url: "/AWB/SaveStaffNotes",
            datatype: "Json",
            data: obj,
            success: function (response) {
                if (response.status == "ok") {
                    $.notify("Notes Updated Successfully!", "success");
                    GetStaffNotes();
                    $('#staffnotes').val('');
                }
            }
            });
    }

    function GetStaffNotes() {
        $.ajax({
            type: "Get",
            url: "/AWB/GetStaffNotes",
            datatype: "Json",
            data: { InScanId: $('#InScanID').val() },
                success: function (response) {
                    if (response.status == "ok") {
                         $("#notesdetailsbody").html('');
                        $.each(response.data, function (index, item) {
                            debugger;
                            var myDate = new Date(item.EntryDate.match(/\d+/)[0] * 1);
                            var cmon = myDate.getMonth() + 1;
                            var entrydate = myDate.getDate() + "-" + cmon + "-" + myDate.getFullYear() + ' ' + myDate.getHours() + ':' + myDate.getMinutes();

                            // <td><a notesid="' + item.NotesId + '" href="javascript:void(0);" class="rem">Remove</a></td>
                            $("#notesdetailsbody").append('<tr notesid="' + item.NotesId + '"><td>' + (parseInt(index) + 1) + '</td><td>' + item.Notes + '</td><td>' + entrydate + '</td><td>' + item.EmployeeName + '</td></tr>');
                        });
                    }
                }
            });
    }

     function savecustomernotification() {

        var obj = {
            'NotificationId': $('#hdnNotificationId').val(),
            'InScanId': $('#InScanID').val(),
            'NotifyByEmail': $('#Email').val(),
            'NotifyBySMS': $('#Email').val(),
            'NotifyByWhatsApp': $('#WhatsApp').val(),
            'MessageText': $('#notifymessage').val(),
            'CustomerEmail': $('#txtcustomeremail').val(),
            'CustomerName': $('txtcustomername').val(),
            'AWBNo': $('#HAWBNo').val()
        }

        $.ajax({
            type: "POST",
            url: "/AWB/SaveCustomerNotification",
            datatype: "Json",
            data: obj,
            success: function (response) {
                if (response.status == "ok") {
                    $.notify("Notification Updated Successfully!", "success");
                    GetCustomerNotification();
                    $('#notifymessage').val('');
                }
            }
            });
    }
    function GetCustomerNotification() {
        $.ajax({
            type: "Get",
            url: "/AWB/GetCustomerNotification",
            datatype: "Json",
            data: { InScanId: $('#InScanID').val() },
                success: function (response) {
                    if (response.status == "ok") {
                        $('#txtcustomername').val(response.customername);
                        $('#txtcustomeremail').val(response.custemail);
                         $("#notificationdetailsbody").html('');
                        $.each(response.data, function (index, item) {
                            debugger;
                            var myDate = new Date(item.EntryDate.match(/\d+/)[0] * 1);
                            var cmon = myDate.getMonth() + 1;
                            var entrydate = myDate.getDate() + "-" + cmon + "-" + myDate.getFullYear() + ' ' + myDate.getHours() + ':' + myDate.getMinutes();

                            // $('#details tr').length - 1;
                            //<td><a notesid="' + item.NotificationId + '" href="javascript:void(0);" class="rem">Remove</a></td>
                            $("#notificationdetailsbody").append('<tr notificationid="' + item.NotificationId + '"><td>' + (parseInt(index) + 1) + '</td><td>' + item.MessageText + '</td><td>' + entrydate + '</td><td>' + item.EmployeeName + '</td></tr>');
                        });
                    }
                }
            });
    }
    function getMovementType() {
        debugger;
        if ($('#OriginCountry').val() != $('#BranchCountry').val() && $('#DeliveryCountry').val() != $('#BranchCountry').val()) {
            $('#MovementTypeID').val(4).trigger('change');//Transhipment
        }
        else if ($('#OriginCountry').val() != $('#BranchCountry').val()) {
            $('#MovementTypeID').val(3).trigger('change'); //import
        }
        else if ($('#DeliveryCountry').val() != $('#BranchCountry').val()) {
            $('#MovementTypeID').val(2).trigger('change');//Export
        }
        else if ($('#DeliveryCountry').val() == $('#BranchCountry').val()) {
            $('#MovementTypeID').val(1).trigger('change'); //Domestic
        }


    }
    $(document).ready(function () {
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $("#HAWBNo").focus();

        $("#OtherChargeName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/AWB/GetOtherChargeAll',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.OtherCharge1,
                                value: val.OtherCharge1,
                                OtherChargeID: val.OtherChargeID,
                                AcHeadID: val.AcHeadID
                            }
                        }))
                    }
                })
            }, minLength: 1,
            autoFocus: true,
            select: function (e, i) {
                e.preventDefault();
                $("#OtherChargeName").val(i.item.label);
                $('#OtherChargeID').val(i.item.OtherChargeID);
                $('#OtherChargeAcHeadID').val(i.item.AcHeadID);
            }
        });
        $(".Allocate").on("click", function () {

            $('#popup').modal('show');
            //$('#popupbackground').show();
        });


        $("#AllocationClose").on("click", function () {
            $('#popup').modal('hide');
            //$('#popupbackground').hide();
        });


        function CalcTotal() {
            var x = $("#CourierCharge").val();
            //var y = $("#PackingCharge").val();
            var z = $("#OtherCharge").val();
            //var a = $("#CustomCharge").val();
            var tot = parseFloat(x) + parseFloat(z); // + parseFloat(a); parseFloat(y)

            $("#totalCharge").val(tot.toFixed(2));
        }

        $("#CourierCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#PackingCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#OtherCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#CustomCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });

        $('#MovementTypeID').change(function () {
            debugger;
            var movetype = $('#MovementTypeID option:selected').text();
            if (movetype == 'Domestic' || movetype == 'Export') {
                $('#materialcost').removeAttr('Disabled');
            }
            else {
                $('#materialcost').val(0);
                $('#materialcost').attr('Disabled', 'disabled');
            }

        });

        $('#Weight').change(function () {
            debugger;
            var weightval = parseFloat($('#Weight').val());
            if (weightval > 30 && $('#ParcelTypeID').val() != 4) {
                if ($('#ParcelTypeID').val() == 0) {
                    $('#ParcelTypeID').val(4);
                }
                else {
                    alert('Weight is only less than 30kg to this parcel type!');
                }
            }
            else if (weightval <= 30 && $('#ParcelTypeID').val() == 4) {
                alert('Weight should be above than 30kg to this selcted parceltype!');
            }

        });

        //$('#ConsigneeCityName').change(function () {
        //    if ($('#ConsigneeCityName').val() == $('#ConsignorCityName').val() || ($('#ConsigneeCountryName').val() == $('#ConsignorCountryName').val()))
        //         {
        //        $('#MovementTypeID').val(1);
        //        $('#materialcost').removeAttr('Disabled');
        //        }
        //        else if ($('#ConsigneeCountryName').val() != $('#ConsignorCountryName').val()) {
        //        $('#MovementTypeID').val(2);
        //        $('#materialcost').val(0);
        //        $('#materialcost').attr('Disabled', 'disabled');
        //    }

        //});

        // $('#ConsigneeCountryName').change(function () {
        //    if ($('#ConsigneeCityName').val() == $('#ConsignorCityName').val() || ($('#ConsigneeCountryName').val() == $('#ConsignorCountryName').val()))
        //         {
        //        $('#MovementTypeID').val(1);
        //        $('#materialcost').removeAttr('Disabled');
        //        }
        //        else if ($('#ConsigneeCountryName').val() != $('#ConsignorCountryName').val()) {
        //        $('#MovementTypeID').val(2);
        //        $('#materialcost').val(0);
        //        $('#materialcost').attr('Disabled', 'disabled');
        //     }

        // });

        $('#ChangeStatusTypeId').change(function () {
            debugger;
            var pcourierstatusid = $('#CourierStatusId').val();
            if (pcourierstatusid == null)
                pcourierstatusid = 0;

            $.ajax({
                type: "POST",
                url: "/AWB/GetStatus",
                datatype: "Json",
                data: { 'StatusTypeId' : $('#ChangeStatusTypeId').val() },
                success: function (response) {
                    debugger;
                    //$('#CourierStatusId').select2("destroy");
                     //$("#ChangeCourierStatusId").select2('destroy');
                     $('#ChangeCourierStatusId').html('');
                    var opthtml = '<option value="0">Select</option>';
                    $(response.data).each(function (index, item) {
                        if (item.id == pcourierstatusid && pcourierstatusid!=0) {
                               opthtml += '<option  value="' + item.id + '">' + item.text + '</option>';
                        }
                        else {
                            opthtml += '<option value="' + item.id + '">' + item.text + '</option>';
                        }
                    });                    
                    $('#ChangeCourierStatusId').html(opthtml);
                    $('#ChangeCourierStatusId').val($('#CourierStatusId').val()).trigger('change');

                    //$('#CourierStatusId').val(response.data[2].id);
                  //  $('#ChangeCourierStatusId').select2();
                    //$('#CourierStatusId').val("2").trigger('change');
                    //$('#CourierStatusId').select2('data', response.data[2]);
                    //$('#CourierStatusId').val('2').text(response.data[2].text);


                    // $('#ChangeCourierStatusId').select2({
                    //        width: '100%',
                    //        allowClear: true,
                    //        multiple: false,
                    //        placeholder: "Select Status"
                    //        });

                    }
               });
           });
        $('#btnsavestatus').click(function () {

             var statusobj = {
                InScanID: $('#InScanID').val(),
                StatusTypeID: $('#ChangeStatusTypeId').val(),
                CourierStatusID: $('#ChangeCourierStatusId').val(),
                CourierStatusText: '' //$("#ChangeCourierStatusId option:selected").text()
            };

             $.ajax({
                type: "POST",
                url: "/AWB/SaveStatus",
                datatype: "Json",
                data: statusobj,
                success: function (response) {
                    debugger;
                    if (response.status == "ok")
                    {
                        var statustype = $("#ChangeStatusTypeId option:selected").text();
                        var statustext = $("#ChangeCourierStatusId option:selected").text();
                        $('#StatusTypeId').val($('#ChangeStatusTypeId').val());
                        $('#CourierStatusId').val($('#ChangeCourierStatusId').val());
                        $('#h4statustype').html(statustype);
                        $('#h4courierstatus').html(response.statustext);
                        $.notify("Status Updated Successfully!", "success");
                    }
                    else
                    {
                       $.notify("Save Failed :" + data, "warning");
                    }

                    $('#StatusModal').modal('hide');

                }
            });


        });

        $("#HAWBNo").keyup(function () {
            $('#h2awb').html('<strong>' + $('#HAWBNo').val() + '</strong>');
        });
        $('#HAWBNo').change(function () {
            
            $.ajax({
                type: "POST",
                url: "/AWB/GetAWB",
                datatype: "Json",
                data: { id: $("#HAWBNo").val() },
                success: function (data) {
                    debugger;
                    if (data.Exist == 0) {
                        $("#IsAvailable").val(0);
                        var AWBInfo = data.AWBInfo;
                        var status = AWBInfo.Status;
                        var mode = AWBInfo.Mode;
                        if (status == 'Available' && mode == 'Prepaid') {
                            var charge = response.CourierCharge;
                            $('#CourierCharge').val(parseFloat(charge).toFixed(2));
                            $('#CourierCharge').attr('readonly', 'readonly');
                            $('#PaymentModeId').val(0).trigger('change');
                            $('#PaymentModeId').val(5).trigger('change');
                            $('#PaymentModeId').attr('readonly', 'readonly');
                            $('#PaymentModeId').attr('disabled', 'disabled');
                        }
                        else if (status == 'Available' && mode == 'NotPrepaid') {
                            $('#PaymentModeId').val(0).trigger('change');
                            $('#PaymentModeId').val(3).trigger('change');
                            $('#PaymentModeId').removeAttr('readonly');
                            $('#PaymentModeId').removeAttr('disabled');
                        }
                        else {
                            $('#PaymentModeId').val(0).trigger('change');
                            $('#PaymentModeId').val(1).trigger('change');
                            $('#customer').val('');
                            $('#customer').attr('AWBCustomerId', 0);
                            $('#customer').attr('AWBCustomer', '');
                            $('#shippername').val('');
                            $('#shippername').removeAttr('readonly');//, 'readonly');
                            $('#CustomerID').val(CustomerId);
                            $("#ConsignorContact").val(ContactPerson);
                            $("#ConsignorAddress1_Building").val('');
                            $("#ConsignorAddress2_Street").val('');

                            $("#ConsignorAddress3_PinCode").val('');

                            $("#ConsignorPhone").val('');
                            $("#ConsignorCountryName").val('');
                            $("#ConsignorCityName").val('');
                            $("#ConsignorLocationName").val('');
                            $("#PickupLocation").val('');
                            $("#DeliveryLocation").val('');
                            $('#PickupSubLocality').val('');
                            $('#DeliverySubLocality').val('');
                            $('#OriginPlaceID').val('');
                            $('#DestinationPlaceID').val('');
                            $("#PickupLocation").removeAttr('readonly');
                            $("#ConsignorMobileNo").val('');
                        }
                        debugger;
                        if (status == 'Available') {
                            var CustomerName = AWBInfo.CustomerName;
                            var CustomerId = AWBInfo.CustomerID;
                            var LocationName = AWBInfo.LocationName;
                            var CityName = AWBInfo.CityName;
                            var CountryName = AWBInfo.CountryName;
                            var Address1 = AWBInfo.Address1;
                            var Address2 = AWBInfo.Address2;
                            var Address3 = AWBInfo.Address3;
                            var PhoneNo = AWBInfo.Phone;
                            var Mobile = AWBInfo.Mobile;
                            var OriginLocation = AWBInfo.OriginLocation;
                            var DestinationLocation = AWBInfo.DestinationLocation;
                            var ContactPerson = '';
                            var PickupSubLocality = AWBInfo.PickupSubLocality;
                            var DeliverySubLocality = AWBInfo.DeliverySubLocality;
                            var OriginPlaceID = AWBInfo.OriginPlaceID;
                            var DestinationPlaceID = AWBInfo.DestinationPlaceID;
                            //$('#InScanID').val(InScanID);
                            //$('#QuickInScanID').val(QuickInScanId);
                            $('#customer').val(CustomerName);
                            $('#customer').attr('AWBCustomerId', CustomerId);
                            $('#customer').attr('AWBCustomer', CustomerName);
                            $('#shippername').val(CustomerName);
                            $('#shippername').attr('readonly', 'readonly');
                            $('#CustomerID').val(CustomerId);
                            $("#ConsignorContact").val(ContactPerson);
                            $("#ConsignorAddress1_Building").val(Address1);
                            $("#ConsignorAddress2_Street").val(Address2);

                            $("#ConsignorAddress3_PinCode").val(Address3);

                            $("#ConsignorPhone").val(PhoneNo);
                            $("#ConsignorCountryName").val(CountryName);
                            $("#ConsignorCityName").val(CityName);
                            $("#ConsignorLocationName").val(LocationName);
                            $("#PickupLocation").val(OriginLocation);
                            $("#DeliveryLocation").val(DestinationLocation);
                            $('#PickupSubLocality').val(PickupSubLocality);
                            $('#DeliverySubLocality').val(DeliverySubLocality);
                            $('#OriginPlaceID').val(OriginPlaceID);
                            $('#DestinationPlaceID').val(DestinationPlaceID);
                            $("#PickUpLocation").attr('readonly', 'readonly');
                            $("#ConsignorMobileNo").val(Mobile);
                        }
                        else {


                        }
                    }
                    else {
                        $("#IsAvailable").val(1);
                        alert("AWB Already Exist..!");
                        $('#HAWBNo').val('');
                        $('#HAWBNo').focus();
                    }

                }
            });
        });
        $("#btnsave").click(function () {
            debugger;

            //var fullform = $('#quickAWB').valid();            
            //if ($("#HAWBNo1").val() != "") {
            //    $.ajax({
            //        type: "POST",
            //        url: "/AWB/GetAWB",
            //        datatype: "Json",
            //        data: { id: $("#HAWBNo").val() },
            //        success: function (data) {
            //            if (data.Exist == 0) {
            //                $("#IsAvailable").val(0);
            //            }
            //            else {
            //                $("#IsAvailable").val(1);
            //            }

            //        }
            //    });
            //}
            //if ($("#IsAvailable").val() == 1) {
            //    alert("AWB Already Exist..!");
            //    $('#HAWBNo').focus();
            //    return false;
            //}
            //else {

                var Weight = $("#Weight").val();

                if (Weight != "") {
                    var weightval = parseFloat($('#Weight').val());
                    if (weightval == 0) {
                        $("#validations").show();
                        return false;
                    }
                    else if (weightval > 30 && $('#ParcelTypeID').val() != 4) {
                        alert('Invalid Parcel Type,Weight is only less than 30kg!');
                        return false;
                    }
                    else if (weightval <= 30 && $('#ParcelTypeID').val() == 4) {
                        alert('Weight should be above than 30kg to this selcted parceltype!');
                        return false;
                    }
                    else {

                        //if ($('#txtAWBProcessed').val() == '') {
                        //    alert($('#AWBProcessed').val());
                        //    if (confirm("Please click Yes to confirm about AWBProcessed?") == true) {
                        //        $('#AWBProcessed').val(true);
                        //    }
                        //}
                        $("#validations").hide();
                        return true;
                    }
                }
            
                //else {
                //    $("#validations").hide();
                //    return true;
                //}

        });
        $('#TransactionDate').keydown(function (e) {

            if (e.keyCode == 13 || e.keyCode == 9) {
                if ($("#TransactionDate").val() != "") {
                    $.ajax({
                        url: "@Url.Action("CheckDateValidate", "Accounts")",
                        data: { entrydate: $("#TransactionDate").val() },
                        type: "GET",
                        dataType: "json",
                        success: function (response) {

                            if (response.Status == "OK") {
                                datevalid = true;
                                dateerror = response.Message;
                            }
                            else {
                                datevalid = false;
                                dateerror = response.Message;

                                $('#TransactionDate').val(response.ValidDate);
                            }

                        },
                        error: function () {
                            alert("Failed! Please try again.");
                        }
                    });
                }
            }
        });
        $('#TransactionDate').change(function ()    {

            if ($("#TransactionDate").val() != "") {
                 $.ajax({
                url: "@Url.Action("CheckDateValidate", "Accounts")",
                     data: { entrydate: $("#TransactionDate").val()},
                type: "GET",
                dataType: "json",
                success: function (response) {
                    if (response.Status == "OK") {
                        datevalid = true;
                        dateerror = response.Message;
                    }
                    else {
                        datevalid = false;
                        dateerror = response.Message;
                        alert(dataerror);
                        $('#TransactionDate').val(response.ValidDate);
                    }

                },
                error: function () {
                    alert("Failed! Please try again.");
                }
            });
            }
        });

        $('#TransactionDate').on('dp.change', function (e) {
            $('#TransactionDate').trigger('change');
        })

        $("#EnquiryNo").change(function () {
            //$("#origincity").empty();
            //$('#origincity').append('<option value="0">Select</option>');

            //$("#originlocation").empty();
            //$('#originlocation').append('<option value="0">Select</option>');

            if ($('#EnquiryNo').val() == 0)
                $('#InScanID').val(0);

            $.ajax({
                type: "POST",
                url: "/AWB/GetCustomerDataByNO",
                datatype: "Json",
                data: { id: $('#EnquiryNo').val() },
                success: function (data) {
                    if (data.Exist == 1) {
                        debugger;
                        $('#HAWBNo').val(data.AWBNo);
                         $('#h2awb').html('<strong>' + $('#HAWBNo').val() + '</strong>');
                        $("#InScanID").val(data.InScanID);
                        $("#CustomerID").val(data.CustomerID);
                        $("#Weight").val(data.Weight);
                        $("#ConsigneeCountryName").val(data.ConsigneeCountryName);
                        $("#ConsigneeCityName").val(data.ConsigneeCityName);

                        $("#ConsignorCountryName").val(data.ConsignorCountryName);
                        $("#ConsignorCityName").val(data.ConsignorCityName);

                        $("#CourierType").val(data.DescriptionID);
                        $("#ConsignorContact").val(data.ConsignorContact);
                        $("#ConsigneeContact").val(data.ConsigneeContact);
                        $("#Consignor").val(data.Consignor);
                        $("#Consignee").val(data.Consignee);
                        $("#ConsignorAddress1_Building").val(data.ConsignorAddress1_Building);
                        $("#ConsignorAddress2_Street").val(data.ConsignorAddress2_Street);
                        $("#ConsignorAddress3_PinCode").val(data.ConsignorAddress3_PinCode);

                        $("#ConsigneeAddress1_Building").val(data.ConsigneeAddress1_Building);
                        $("#ConsigneeAddress2_Street").val(data.ConsigneeAddress2_Street);
                        $("#ConsigneeAddress3_PinCode").val(data.ConsigneeAddress3_PinCode);

                        $("#ConsigneePhone").val(data.ConsigneePhone);
                        $("#ConsignorPhone").val(data.ConsignorPhone);

                        $("#ConsignorLocationName").val(data.ConsignorLocationName);
                        $("#autocomplete").val(data.ConsigneeLocationName);
                        $('#PickedBy').val(obj.CollectedEmpID);
                        //$("#ConsigneeCountryName").val(data.ConsigneeCountryName);
                        //$("#ConsigneeCityName").val(data.ConsigneeCityName);




                        //BindCity(data.CityID);




                    }
                    else {
                        alert("Data Not Found");
                    }
                }

            });
        });


        $(function () {
            $('#TransactionDate').datetimepicker({
               // maxDate:'@_maxdate',
                //minDate: '@_mindate',
                format: 'DD-MM-YYYY HH:mm'
            });
        });
        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth()+1;
        var curr_year = d.getFullYear();

        var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();


        var divitems = $('#divcustomer1').find('.form-control');

        if (@ViewBag.EditMode== true) {

            //if ($('#AWBProcessed').val() == True) {
            //    $('#txtAWBProcessed').val(1);
            //}
             //$('#divcustomer1').find('.form-control').each(function(index,item) {
             //   console.log(item);
             //    $(item).attr('disabled', 'disabled');
             //});

            //$('#divcustomer2').find('.form-control').each(function(index,item) {
            //    console.log(item);
            //     $(item).attr('disabled', 'disabled');
            //});

            //$('#divcustomer3').find('.form-control').each(function(index,item) {
            //    console.log(item);
            //     $(item).attr('disabled', 'disabled');
            //});

             var movetype = $('#MovementTypeID option:selected').text();
            if (movetype == 'Domestic') {
                $('#materialcost').removeAttr('Disabled');
            }
            else {
                $('#materialcost').val(0);
                $('#materialcost').attr('Disabled', 'disabled');
            }


            if ($('#InvoiceId').val() != '' && $('#InvoiceId').val() != '0') {
                $("#CourierCharge").attr('readonly', 'readonly');
                $("#OtherCharge").attr('readonly', 'readonly');
            }
            if ($('#TaxAmount').val() != 0) {
                $('#ChkTaxPercent').prop('checked', 'true');
            }
            else {
                $('#ChkTaxPercent').prop('checked', 'false');
            }

            var modeid = $('#PaymentModeId').val();
            if (modeid == 1) { //PKP
                $('#divcustomer').addClass('hide');
                $('#divcash').removeClass('hide');
                $('#AcHeadName').removeAttr('readonly');
                $('#AcHeadName').attr('required', 'required');
            }
            else {
                $('#divcustomer').removeClass('hide');
                $('#divcustomer').removeClass('hide');
                $('#divcash').addClass('hide');
                $('#AcHeadName').removeAttr('required');
            }
            //  setTwoNumberDecimal($("#CourierCharge")); //.val('0.00');
            //setTwoNumberDecimal($("#PackingCharge")); //.val('0.00');
            //setTwoNumberDecimal($("#OtherCharge")); //.val('0.00');
            //setTwoNumberDecimal($("#CustomCharge")); //.val('0.00');
            //setTwoNumberDecimal($("#totalCharge")); //.val('0.00');
            //setTwoNumberDecimal($("#materialcost")); //.val('0.00');
        }
        else {
            $('#CustomerandShipperSame').prop('checked', 'checked');
            $('#ChkTaxPercent').prop('checked', 'checked');
              $('#TransactionDate').val(reqdate);
         $("#CourierCharge").val('0.00');
        $("#PackingCharge").val('0.00');
        $("#OtherCharge").val('0.00');
        $("#CustomCharge").val('0.00');
            $("#totalCharge").val('0.00');
            $("#PaymentModeId").trigger('change');

        if ( $('#InScanID').val() == "0" || $('#InScanID').val() == 0 || $('#InScanID').val() == null) {
            $('#divsetting').addClass('hide');
            $('#HAWBNo').focus();
        }

    }


    });
</script>
<script>
    //get courier charge
    function getCourierCharge() {
        debugger;
        var CustomerRateTypeID = $('#CustomerRateTypeID').val();
        var CustomerId = $('#CustomerID').val();
        var MovementId = $('#MovementTypeID').val();
        var ProductTypeID = $('#ProductTypeID').val();
        var PaymentModeId = $('#PaymentModeId').val();
        var Weight = $('#Weight').val();
        var CountryName = $('#DeliveryCountry').val(); //Delhi, India $("#ConsigneeCountryName").val();
        var CityName = $('#DeliveryCity').val(); //$("#ConsigneeCityName").val();
        var OriginCountry = $('#OriginCountry').val(); //Delhi, India $("#ConsigneeCountryName").val();
        var OriginCity = $('#OriginCity').val(); //$("#ConsigneeCityName").val();
        var checkstatus = true;
        if (PaymentModeId == 5 || PaymentModeId == '5' && PaymentModeId == null) {
            checkstatus = false;
            $('#CustomerRateType').attr('placeholder', 'No RateType');
            return;
        }
        if (PaymentModeId == 5 || PaymentModeId == '5' && PaymentModeId == null) {
            checkstatus = false;
            return;
        }
        else if (CustomerId == null || CustomerId == '' || CustomerId == null) {
            checkstatus = false;
            return;
        }
        else if (MovementId == null || MovementId == '') {
            checkstatus = false;
            return;
        }
        else if (ProductTypeID == null || ProductTypeID == '' || ProductTypeID == 0) {
            checkstatus = false;
            return;
        }
        else if (MovementId != 3 && (CountryName == null || CountryName == '' || CityName == '' || CityName == null)) {
            checkstatus = false;
            return;
        }
        else if (MovementId == 3 && (OriginCountry == null || OriginCountry == '' || OriginCity == '' || OriginCity == null)) {
            checkstatus = false;
            return;
        }

        if (checkstatus) {
            $.ajax({
                url: '/AWBBatch/GetCustomerRateType',
                datatype: "json",
                data: {
                    term: '', CustomerId: $('#CustomerID').val(), MovementId: $('#MovementTypeID').val(), ProductTypeID: $('#ProductTypeID').val(), PaymentModeId: $('#PaymentModeId').val(), FAgentID: $('#FagentID').val(), CityName: $('#DeliveryCity').val(), CountryName: $('#DeliveryCountry').val(), OriginCountry: OriginCountry, OriginCity: OriginCity
                },
                success: function (data) {
                    console.log(data);
                    var status = '';
                    if (data.length > 0) {
                        for (var i = 0; i < data.length; i++) {
                            debugger;
                            if ($('#CustomerRateTypeID').val() == 0) {
                                $('#CustomerRateType').val(data[i].CustomerRateType1);
                                $('#CustomerRateTypeID').val(data[i].CustomerRateTypeID);
                                GetcourierChargenew();
                                status = "ok";
                            }
                            else if (data[i].CustomerRateTypeID == $('#CustomerRateTypeID').val()) {
                                GetcourierChargenew();
                                status = "ok";
                            }

                            if ((i + 1) == data.length) {
                                if (status == '') {
                                    $('#CustomerRateType').val(data[0].CustomerRateType1);
                                    $('#CustomerRateTypeID').val(data[0].CustomerRateTypeID);
                                    GetcourierChargenew();
                                    status = "ok";
                                }
                            }
                        }
                    }
                    else {
                        $('#CustomerRateTypeID').val(0);
                        $('#CustomerRateType').val("Manual Rate");
                        $('#CourierCharge').val(0);
                    }
                }
            })
        }
    }
    function GetcourierChargenew() {
        var CustomerRateTypeID = $('#CustomerRateTypeID').val();
        var CustomerId = $('#CustomerID').val();
        var MovementId = $('#MovementTypeID').val();
        var ProductTypeID = $('#ProductTypeID').val();
        var PaymentModeId = $('#PaymentModeId').val();
        var Weight = $('#Weight').val();
        var CountryName = $('#DeliveryCountry').val(); //Delhi, India $("#ConsigneeCountryName").val();
        var CityName = $('#DeliveryCity').val(); //$("#ConsigneeCityName").val();
        var CountryName1 = $('#OriginCountry').val(); //Delhi, India $("#ConsigneeCountryName").val();
        var CityName1 = $('#OriginCity').val(); //$("#ConsigneeCityName").val();
        $.ajax({
            type: "Post",
            url: '/AWBBatch/GetCourierCharge',
            datatype: "json",
            data: {
                CustomerRateTypeID: CustomerRateTypeID, CustomerId: CustomerId, MovementId: MovementId, ProductTypeID: ProductTypeID, PaymentModeId: PaymentModeId, Weight: Weight, CountryName: CountryName, CityName: CityName
            },
            success: function (response) {
                debugger;
                if (response != null) {
                    if ($('#CustomerRateTypeID').val() != response.CustomerRateTypeID) {
                        $('#CustomerRateTypeID').val(response.CustomerRateTypeID);
                        $('#CustomerRateType').val(response.CustomerRateType);
                    }
                    $('#CourierCharge').val(response.CourierCharge);
                    CalculateTax();
                }
                else {
                    $('#CustomerRateTypeID').val(0);
                    $('#CustomerRateType').val(0);
                    $('#CourierCharge').val(0);
                    CalculateTax();
                }
            }
        });
    }
    $(document).ready(function () {
        //$('#CustomerRateType').change(function () {
        //    if ($('#CustomerRateType').val() == '') {
        //        $('#CustomerRateTypeID').val(0);
        //    }
        //    else if ($('#CustomerRateType').val() != $('#CustomerRateTypeID').attr('label')) {
        //        $('#CustomerRateType').val('');
        //        $('#CustomerRateTypeID').val(0);
        //    }
        //    getCourierCharge();
        //});
        $("#FAgentName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/AWBBatch/GetForwardingAgent',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AgentName,
                                value: val.FAgentID

                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#FAgentName').val(ui.item.label);
                $('#FAgentID').val(ui.item.value);
                $('#FAgentID').attr('label', ui.item.label);

            },
            select: function (e, i) {
                e.preventDefault();
                $('#FAgentName').val(i.item.label);
                $('#FAgentID').val(i.item.value);
                $('#FAgentID').attr('label', i.item.label);
            }
        });
        $("#FAgentName").change(function () {
            if ($("#FAgentName").val() == '') {
                $('#FAgentID').val(0);
                $('#FAgentID').attr('label', '');
            }
            else if ($("#FAgentName").val() != $('#FAgentID').attr('label')) {
                $('#FAgentID').val(0);
                $('#FAgentID').attr('label', '');
            }
            getCourierCharge();
        });


        $("#Description").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/AWBBatch/GetTypeofGoods',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {                            
                            return {
                                label: val.TypeOfGood1,
                                value: val.TypeOfGood1

                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#Description').val(ui.item.value);

            },
            select: function (e, i) {
                e.preventDefault();
                $('#Description').val(i.item.value);
            }
        });

        //Courier charge call
        $('#CustomerName').change(function () {
            getCourierCharge();
        });
        $('#ProductTypeID').change(function () {
            getCourierCharge();
        });
        $('#PaymentModeId').change(function () {
            getCourierCharge();
        });
        $('#Weight').change(function () {
            getCourierCharge();
        });
        $('#DeliveryLocation').change(function () {
            if ($('#OriginCountry').val() != $('#BranchCountry').val()) {
                $('#MovementTypeID').val(3).trigger('change');
            }
            else if ($('#DeliveryCity').val() == $('#BranchCity').val()) {
                $('#MovementTypeID').val(1).trigger('change');
            }
            else if ($('#DeliveryCity').val() != $('#BranchCity').val()) {
                $('#MovementTypeID').val(2).trigger('change');
            }
            getCourierCharge();

        });
        $('#MovementTypeID').change(function () {
            getCourierCharge();
        });
        $('#PickupLocation').change(function () {
            if ($('#OriginCountry').val() != $('#BranchCountry').val()) {
                $('#MovementTypeID').val(3).trigger('change');
            }
            if ($('#MovementTypeID').val() == 3) {
                getCourierCharge();
            }
        });
       

        
    });
</script>

<section class="content-header">
    <div class="row">
        <div class="col-md-5 pull-left">
            <h1 class="headingfont">AirWay Bill</h1>
        </div>
        <div class="col-md-5 pull-right text-right">
            <h2 class="awb" id="h2awb"><strong>@ViewBag.AWBNo</strong></h2>
            @*<h5>Delivered</h5>*@
            <h4 class="text-right" id="h4statustype" style='color:#07a7e3!important;display:inline-block;padding-right:5px;margin:0'>@ViewBag.StatusType</h4>
            <h5 class="" id="h4courierstatus" style='color:red;display:inline-block;'>@ViewBag.CourierStatus</h5>
        </div>

    </div>
    <div class="row">
        <div class="pull-right setting">
            <div class="navbar-custom-menu" id="divsetting">
                <ul class="nav navbar-nav">

                    <!-- User Account Menu -->
                    <li class="dropdown user user-menu">
                        <!-- Menu Toggle Button -->

                        <ul class="dropdown-menu extended logout" style="top:0%!important">
                            <li>
                                <a style="color:#35b8eb;cursor:pointer" onclick="ShowStatusModal()">Change Status</a>
                            </li>
                            <li>
                                <a style="color:#35b8eb;cursor:pointer" href="/AWB/AWBTimeline">Time Line</a>
                            </li>
                            <li><a style="color:#35b8eb;cursor:pointer" href="@Url.Action("AWBPrint", new { id = Model.InScanID })">Print Airway Bill</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" onclick="ShowNotification()">Customer Notification</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" onclick="ShowStaffNotes()">Staff Notes</a></li>

                            <li><a style="color:#35b8eb;cursor:pointer" href="#divCostUpdate">Cost Update</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" href="@Url.Action("GenerateInvoice", new { id = Model.InScanID })">Generate Invoice</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" href="#divforwardingagent">Assign Forwarding Agent</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" onclick="noaction()">Update POD</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" onclick="noaction()">Export to Excel</a></li>
                        </ul>
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                            <i style="font-size: 30px;color:#35b8eb;padding-top: 11px;" class="fa fa-cog"></i>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>




<section class="content">

    @using (Html.BeginForm("Create", "AWB", FormMethod.Post, new { @id = "quickAWB" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
        <input type="hidden" id="IsAvailable" value="0" />


        @*<div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-12">
                    <h3 style="color:white">Customer Details</h3><hr />
                </div>
            </div>*@
        <div class="row no-margin">
            <div class="col-md-2">
                <input type="hidden" id="hdnCustomerType" value="0" />
                @Html.HiddenFor(model => model.InScanID)
                @Html.HiddenFor(model => model.BranchID)
                @Html.HiddenFor(model => model.DepotID)
                @Html.HiddenFor(model => model.InvoiceId)
                @Html.HiddenFor(model => model.AWBProcessed)
                @Html.HiddenFor(model => model.AcCompanyID)
                @Html.HiddenFor(model => model.UserID)
                @Html.HiddenFor(model => model.CourierStatusId)
                @Html.HiddenFor(model => model.StatusTypeId)
                @Html.HiddenFor(model => model.CustomerID)
                @Html.HiddenFor(model => model.CASHCustomerId)
                @Html.HiddenFor(model => model.CODCustomerID)
                @Html.HiddenFor(model => model.CODCustomerName)
                @Html.HiddenFor(model => model.CASHCustomerName)
                @Html.HiddenFor(model => model.FOCCustomerName)
                @Html.HiddenFor(model => model.FOCCustomerID)
                @Html.HiddenFor(model => model.DefaultFAgentID)
                @Html.HiddenFor(model => model.DefaultFAgentName)
                <input type="hidden" id="txtAWBProcessed" value="" required />
                <label class="headinglabel required">Airway Bill No.</label>
                @if (@Model.InScanID == 0)
                {@Html.TextBoxFor(model => model.HAWBNo, new { @class = "form-control txttarget", @required = "true", @maxlength = 11 }) }

            else
            {
                @Html.TextBoxFor(model => model.HAWBNo, new { @class = "form-control txttarget", @Disabled = "disabled" })
            }

            </div>
            <div class="col-md-2">

                <label class="headinglabel">Transaction Date</label>
                @Html.TextBoxFor(model => model.TransactionDate, new { @class = "form-control", @required = "true" })
                @Html.ValidationMessageFor(model => model.TransactionDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Pickup Request No.</label>
                @Html.TextBoxFor(model => model.EnquiryNo, new { @class = "form-control" })
                @*@Html.DropDownListFor(model => model.EnquiryNo, new SelectList(@ViewBag.Enquiry, "EnquiryNo", "EnquiryNo"), "Select", new { @class = "form-control" })*@
            </div>
            <div class="col-md-2">
                <label class="headinglabel required">Payment Mode</label>
                @Html.DropDownListFor(model => model.PaymentModeId, new SelectList(@ViewBag.PaymentMode, "ID", "PaymentModeText"), "Select", new { @class = "form-control", @required = "true" })
            </div>
            <div class="col-md-4" id="divcustomer">
                <div class="flexTitle">
                    <label class="headinglabel required">Customer</label>
                    <div class="checkboxdesign no-padding text-right" style="float:right">
                        @Html.CheckBox("CustomerandShipperSame", new { @name = "CustomerandShipperSame" }) &nbsp
                        <label class="headinglabel" style="color:#07a7e3!important;padding-left: 0!important">copy address to shipper</label>
                    </div>
                </div>
                @Html.HiddenFor(model => model.CustomerID, new { @class = "form-control txttarget" })
                @Html.TextBoxFor(model => model.customer, new { @class = "form-control txttarget", @required = "true" })

            </div>
            <div class="col-md-4 hide" id="divcash">
                <label class="headinglabel">Cash Account</label>
                @Html.TextBoxFor(model => model.AcHeadName, new { @class = "form-control txttarget", @required = "true", @autocomplete = "off", @type = "search" })
                @Html.HiddenFor(model => model.AcheadID, new { })
            </div>
        </div>


        <div class="row no-margin">
            <div class="col-md-12 detailBox" style="padding-top:20px">
                <div class="bg_box">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="flexTitle">
                                <h3 style="color:white; margin-top:10px">Consignor/Shipper Details</h3>


                            </div>

                        </div>
                        <div class="clearfix"></div>

                        <hr />
                    </div>

                    @*<div class="row no-margin">
                                <div class="col-md-3 checkboxdesign" style="padding-top: 20px">
                                    @Html.CheckBox("CustomerandShipperSame", new { @name = "CustomerandShipperSame" }) &nbsp
                                    <label class="headinglabel" style="font-weight:bold;color:#07a7e3!important">Copy Address from Customer</label>

                            </div>
                        </div>*@

                    <div class="row no-margin" style="margin-top:10px!important">
                        <div class="col-md-3">
                            <label class="headinglabel required">Name</label>
                            @Html.TextBoxFor(model => model.shippername, new { @class = "form-control txttarget", @autocomplete = "off", @type = "search", @required = "true", @style = "", @placeholder = "Shipper Name" })
                        </div>

                        <div class="col-md-3">
                            <label class="headinglabel">Contact Person</label>
                            @Html.TextBoxFor(model => model.ConsignorContact, new { @class = "form-control txttarget", @placeholder = "Contact Person" })
                            @Html.ValidationMessageFor(model => model.ConsignorContact, "", new { @class = "text-danger", @placeholder = "Contact Person" })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Flat/Building</label>
                            @Html.TextBoxFor(model => model.ConsignorAddress1_Building, new { @class = "form-control txttarget",  @placeholder = "Flat/Building" })
                        </div>

                        <div class="col-md-2">
                            <label class="headinglabel">Street</label>
                            @Html.TextBoxFor(model => model.ConsignorAddress2_Street, new { @class = "form-control txttarget",  @placeholder = "Street" })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Pincode</label>
                            @Html.TextBoxFor(model => model.ConsignorAddress3_PinCode, new { @class = "form-control text-right txttarget",   @placeholder = "PinCode" })
                        </div>
                    </div>
                    <div class="row no-margin" style="padding-top: 10px" id="divcustomer2">

                    </div>
                    <div class="row no-margin" style="padding-top: 10px" id="divcustomer3">
                        <div class="col-md-3">
                            <label class="headinglabel required">Location</label>
                            @Html.TextBoxFor(model => model.ConsignorLocationName, new { @class = "form-control txttarget autocomplete", @required = "true", @placeholder = "Location" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Origin City</label>
                            @Html.TextBoxFor(model => model.ConsignorCityName, new { @class = "form-control txttarget", @required = "true", @readonly = "readonly" })
                            @*<input class="form-control" id="ConsignorCityName" name="ConsignorCityName" type="text" readonly />*@
                            @*@Html.DropDownListFor(model => model.origincity, new SelectList(@ViewBag.City, "CityID", "City"), "Select", new { @class = "form-control" })*@
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel required">Origin Country</label>
                            @Html.TextBoxFor(model => model.ConsignorCountryName, new { @class = "form-control txttarget", @required = "true", @readonly = "readonly" })
                            @*<input class="form-control" id="ConsignorCountryName" name="ConsignorCountryName" type="text" readonly />*@
                            @*@Html.DropDownListFor(model => model.origincountry, new SelectList(@ViewBag.Country, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Telephone No.</label>
                            @Html.TextBoxFor(model => model.ConsignorPhone, new { @class = "form-control textright",   @placeholder = "Telephone" })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel required">Mobile No.</label>
                            @Html.TextBoxFor(model => model.ConsignorMobile, new { @class = "form-control textright", @required = "true", @placeholder = "Telephone" })
                        </div>
                    </div>

                </div>
            </div>


            <div class="col-md-12 detailBox">
                <div class="bg_box">
                    <div class="col-md-12">
                        <h3 style="color:white; margin-top:5px;">Receiver/Consignee Details</h3><hr />
                    </div>
                    <div class="clearfix"></div>
                    <div class="row no-margin" style="padding-top: 10px; ">
                        <div class="col-md-3">                            
                            <div class="flexTitle">
                                <label class="headinglabel required">Consignee Name</label>
                                <div class="checkboxdesign no-padding text-right" style="float:right">
                                    @Html.CheckBox("ShowAllConsignee", new { @name = "ShowAllConsignee" }) &nbsp
                                    <label class="headinglabel" style="color:#07a7e3!important;padding-left: 0!important">Show All Consignee</label>
                                </div>
                            </div>
                            @Html.TextBoxFor(model => model.Consignee, new { @class = "form-control txttarget", @autocomplete = "off", @type = "search", @required = "true" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel">Contact Person</label>
                            @Html.TextBoxFor(model => model.ConsigneeContact, new { @class = "form-control txttarget"  })
                        </div>

                        <div class="col-md-2">
                            <label class="headinglabel">Flat/Building</label>
                            @Html.TextBoxFor(model => model.ConsigneeAddress1_Building, new { @class = "form-control txttarget" })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Street</label>
                            @Html.TextBoxFor(model => model.ConsigneeAddress2_Street, new { @class = "form-control txttarget" })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Pincode</label>
                            @Html.TextBoxFor(model => model.ConsigneeAddress3_PinCode, new { @class = "form-control txttarget" })
                        </div>
                    </div>

                    <div class="row no-margin" style="padding-top: 10px">
                        <div class="col-md-3">
                            <label class="headinglabel required">Consingee Location</label>
                            @Html.TextBoxFor(model => model.ConsigneeLocationName, new { @class = "form-control txttarget autocomplete",   @required = "true" })
                            @*<input class="form-control  " id="ConsigneeLocationName" name="ConsigneeLocationName" onFocus="geolocate()" type="text" />*@
                            @*@Html.TextBoxFor(model => model.destlocation, new { @class = "form-control txttarget" })*@
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel required">Consignee City</label>
                            @Html.TextBoxFor(model => model.ConsigneeCityName, new { @class = "form-control txttarget",  @required = "true", @readonly = "readonly" })
                            @*<input class="form-control" id="ConsigneeCityName" name="CityName" type="text" onFocus="geoCitylocate()" />*@
                            @*@Html.DropDownListFor(model => model.destinationCity, new SelectList(@ViewBag.City, "CityID", "City"), "Select", new { @class = "form-control" })*@
                        </div>

                        <div class="col-md-2">
                            <label class="headinglabel required">Consignee Country</label>
                            @Html.TextBoxFor(model => model.ConsigneeCountryName, new { @class = "form-control txttarget", @required = "true",@readonly="readonly" })
                            @*<input class="form-control" id="ConsigneeCountryName" name="ConsigneeCountryName" type="text" onFocus="geoCountrylocate()" />*@
                            @*@Html.DropDownListFor(model => model.destinationCountry, new SelectList(@ViewBag.Country, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Telephone No</label>
                            @Html.TextBoxFor(model => model.ConsigneePhone, new { @class = "form-control textright"})
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Mobile No.</label>
                            @Html.TextBoxFor(model => model.ConsigneeMobile, new { @class = "form-control textright", @required = "true" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row no-margin">
            <div class="col-md-12 details1">
                <div class="bg_box1">
                    <div class="col-md-12">
                        <h3 style="color:white">Shipment Details</h3><hr />
                    </div>

                    <div class="clearfix"></div>
                    <div class="row no-margin" style="padding-top: 10px">
                        <div class="col-md-3">
                            <label class="headinglabel">PickUp Location</label>
                            @Html.TextBoxFor(model => model.PickupLocation, new { @class = "form-control txttarget" })
                            @Html.HiddenFor(model => model.PickupLocationPlaceId)
                            @Html.HiddenFor(model => model.OriginCountry)
                            @Html.HiddenFor(model => model.OriginCity)
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel">Delivery Location </label>
                            @Html.TextBoxFor(model => model.DeliveryLocation, new { @class = "form-control txttarget" })
                            @Html.HiddenFor(model => model.DeliveryLocationPlaceId)
                            @Html.HiddenFor(model => model.DeliveryCountry)
                            @Html.HiddenFor(model => model.DeliveryCity)
                            @Html.HiddenFor(model => model.BranchLocation)
                            @Html.HiddenFor(model => model.BranchCity)
                            @Html.HiddenFor(model => model.BranchCountry)
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel">PickUp Sub Location</label>
                            @Html.TextBoxFor(model => model.PickupSubLocality, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel">Delivery Sub Location</label>
                            @Html.TextBoxFor(model => model.DeliverySubLocality, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="row no-margin" style="padding-top: 10px">
                        <div class="col-md-2">
                            <label class="headinglabel required">Description</label>
                            @Html.TextBoxFor(model => model.Description, new { @class = "form-control txttarget", @required = "true", @autocomplete = "off" })
                        </div>

                        <div class="col-md-1">
                            <label class="headinglabel required">Pieces</label>
                            @Html.TextBoxFor(model => model.Pieces, new { @class = "form-control textright", @onkeypress = "return isNumberKey1(event)", @required = "true", @maxlength = 13 })
                        </div>
                        <div class="col-md-1">
                            <label class="headinglabel required">Weight</label>
                            @Html.TextBoxFor(model => model.Weight, new { @class = "form-control textright", @onkeypress = "return isNumberKey(event)", @onchange = "setThreeNumberDecimal(this)", @required = "true", @minimum = 0.1 })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel required">Movement Type</label>
                            @Html.DropDownListFor(model => model.MovementTypeID, new SelectList(@ViewBag.Movement, "MovementID", "MovementType"), "Select", new { @class = "form-control", @required = "true" })
                        </div>



                        <div class="col-md-3">
                            <label class="headinglabel required">Product Type</label>
                            @Html.DropDownListFor(model => model.ProductTypeID, new SelectList(@ViewBag.ProductType, "ProductTypeID", "ProductName"), "Select", new { @class = "form-control", @required = "true" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Parcel Type</label>
                            @Html.DropDownListFor(model => model.ParcelTypeID, new SelectList(@ViewBag.parceltype, "ID", "ParcelType1"), "Select", new { @class = "form-control", @required = "true" })
                        </div>


                    </div>
                    <div class="row no-margin" style="padding-top:10px;">
                        <div class="col-md-12">
                            <label class="headinglabel">Remarks</label>
                            @Html.TextBoxFor(model => model.remarks, new { @class = "form-control txttarget" })
                        </div>
                    </div>

                </div>


            </div>


            <div class="col-md-12 details1" id="divCostUpdate">
                <div class="bg_box1">
                    <h3 style="color:white">Cost Updation</h3><hr />


                    <div class="row no-margin" style="padding-top: 10px">


                        <div class="col-md-2">
                            <label class="headinglabel required">Customer Rate Type</label>
                            @Html.TextBoxFor(model => model.CustomerRateType, new { @class = "form-control", @autocomplete = "off" })
                            @Html.HiddenFor(model => model.CustomerRateTypeID)
                            @*@Html.DropDownListFor(model => model.CustomerRateTypeID, new SelectList(@ViewBag.customerrate, "CustomerRateTypeID", "CustomerRateType1"), "Select", new { @class = "form-control", @required = "true" })*@
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel required">Courier Charge</label>
                            @Html.TextBoxFor(model => model.CourierCharge, string.Format("{0:n2}", Model.CourierCharge), new { @class = "form-control textright", @onchange = "setTwoNumberDecimal(this)", @required = "true" })
                        </div>
                        <div class="col-md-1">
                            <label class="headinglabel">Other Charge</label>
                            @Html.TextBoxFor(model => model.OtherCharge, string.Format("{0:n2}", Model.OtherCharge), new { @class = "form-control textright", @onkeypress = "return isNumberKey(event)", @onchange = "setTwoNumberDecimal(this)" })
                            @*<input type="button" style="float:right" value="O" onclick="ShowOtherChargesModal()" />*@
                        </div>
                        <div class="col-md-1">
                            @*<label class="headinglabel">Add Other Charge</label>*@
                            <a href="javascript:void(0)" class="Allocate" title="Add Other Charge"><i class="fa fa-bars"></i></a>
                        </div>
                        <div class="col-xs-12 col-sm-2">
                            <div class="flexTitle">
                                <label class="headinglabel red" id="lblTaxPercent">Tax + @Model.TaxPercent %</label>
                                <div class="checkboxdesign no-padding text-right" style="float:right">
                                    @Html.CheckBox("ChkTaxPercent", new { @name = "ChkTaxPercent", @onchange = "CalculateTax()" }) &nbsp
                                    <label class="headinglabel" style="color:#07a7e3!important;padding-left: 0!important">Tax</label>
                                </div>
                            </div>
                            @Html.TextBoxFor(model => model.TaxAmount, new { @class = "form-control text-right", @autocomplete = "off", @readonly = "true" })
                            @Html.HiddenFor(mode => Model.TaxPercent)
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Material Cost</label>
                            @Html.TextBoxFor(model => model.materialcost, string.Format("{0:n2}", Model.materialcost), new { @class = "form-control txtright textright", @onkeypress = "return isNumberKey(event)", @onchange = "setTwoNumberDecimal(this)" })
                        </div>

                        <div class="col-md-2">
                            <label class="headinglabel">Total</label>
                            @Html.TextBoxFor(model => model.totalCharge, string.Format("{0:n2}", Model.totalCharge), new { @class = "form-control textright", @onchange = "setTwoNumberDecimal(this)", @readonly = "readonly" })
                        </div>
                        <div class="col-md-12 inline_checkbox checkboxdesign " style="padding-top: 5px!important">
                            <div>
                                @Html.CheckBox("IsNCND", new { @name = "IsNCND" })

                                <label class="headinglabel">Instructions</label>
                            </div>
                            <div>
                                @Html.CheckBox("IsCashOnly", new { @name = "IsCashOnly" })

                                <label class="headinglabel">NCND</label>
                            </div>
                            <div>
                                @Html.CheckBox("IsChequeOnly", new { @name = "IsChequeOnly" })

                                <label class="headinglabel">Cash Only</label>
                            </div>

                            <div>
                                @Html.CheckBox("IsCollectMaterial", new { @name = "IsCollectMaterial" })

                                <label class="headinglabel">Cheque</label>
                            </div>
                            <div>
                                @Html.CheckBox("IsDOCopyBack", new { @name = "IsDOCopyBack" })

                                <label class="headinglabel">Collect Material</label>
                            </div>

                            <label class="headinglabel">DO Copy Back</label>

                        </div>

                    </div>



                </div>



            </div>
        </div>
        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12">
                <div class="row no-margin" style="padding-top: 10px" id="divforwardingagent">

                    <h3 style="color:white">Forwarding Agent Details</h3><hr />

                </div>

                <div class="row no-margin" style="padding-top: 10px">

                    <div class="col-md-3">
                        <label class="headinglabel">Forwarding Agent</label>
                        @Html.DropDownListFor(model => model.FagentID, new SelectList(@ViewBag.FAgent, "FAgentID", "FAgentName"), "Select", new { @class = "form-control" })
                    </div>


                    <div class="col-md-3">
                        <label class="headinglabel">Forwarding Agent Number</label>
                        @Html.TextBoxFor(model => model.FAWBNo, new { @class = "form-control" })
                    </div>

                    <div class="col-md-3">
                        <label class="headinglabel">Forwarding Agent Flight</label>
                        @Html.TextBoxFor(model => model.ForwardingCharge, new { @class = "form-control textright" })
                    </div>
                    <div class="col-md-3">
                        <label class="headinglabel">Forwarding Rate</label>
                        @Html.TextBoxFor(model => model.ForwardingCharge, new { @class = "form-control textright" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12">

                <h3 style="color:white">Audit Details</h3><hr />

                <div class="row no-margin" style="padding-top: 10px">

                    <div class="col-md-6">
                        <label class="headinglabel">Picked up By</label>
                        @Html.DropDownListFor(model => model.PickedBy, new SelectList(@ViewBag.Employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
                    </div>

                    <div class="col-md-6">
                        <label class="headinglabel">Depot Received By</label>
                        @Html.DropDownListFor(model => model.ReceivedBy, new SelectList(@ViewBag.Employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
                    </div>

                </div>
                <div class="row no-margin" style="padding-top: 10px">

                    <div class="col-md-6">
                        <label class="headinglabel">Created By & Date  </label>
                        @Html.DisplayFor(model => model.CreatedByName, new { @class = "form-control" }) &nbsp;&nbsp;
                        @Html.DisplayFor(model => model.CreatedByDate, new { @class = "form-control" })
                    </div>


                    <div class="col-md-6">

                        <label class="headinglabel">Last Modified By & Date  </label>
                        @Html.DisplayFor(model => model.LastModifiedByName, new { @class = "form-control" }) &nbsp;&nbsp;
                        @Html.DisplayFor(model => model.LastModifiedDate, new { @class = "form-control" })
                    </div>


                </div>

            </div>

        </div>


        <div class="row no-margin" style="padding-top: 10px">

            <div class="col-md-12 btn-right">


                <input type="submit" value="Save" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;<a href='@Url.Action("Index", "AWB", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>



            </div>

        </div>


        <div style="width:100%;height:3000px; color:black;opacity:0.6;z-index:5;display:none;background-color: black;position:absolute;top:0;left:0;" id="popupbackground">


        </div>


        <div class="modal fade" id="popup" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">

            <div class="modal-dialog">

                <div class="modal-content" style="border-radius:5px">

                    <div class="modal-header">

                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

                        <h4 class="modal-title" id="exampleModalLabel">
                            Other Charges
                        </h4>

                    </div>


                    <div class="modal-body">

                        <div class="container-fluid">

                            <div class="row">


                                <input type="hidden" value="@Model.otherchargesVM.Count" id="RowCount" />

                                <table id="ExpAllocationTable" class="table table-bordered table-responsive">

                                    <thead>

                                        <tr>

                                            <th>Other Charge</th>

                                            <th>Amount </th>

                                            <th>Delete </th>

                                        </tr>

                                    </thead>

                                    <tbody id="OtherChargeTable">
                                        @foreach (var item in Model.otherchargesVM)
                                        {
                                            <tr>
                                                <td>
                                                    @item.OtherChargeName
                                                    <input type="hidden" class="OChargeID" name="otherchargesVM[@otherchargecount].OtherChargeID" value="@item.OtherChargeID" />
                                                </td>
                                                <td style="text-align:right">
                                                    @CMSV2.Models.CommanFunctions.GetDecimalFormat(@item.Amount, "2")
                                                    <input type="hidden" id="Amount_@otherchargecount" name="otherchargesVM[@otherchargecount].Amount" class="ExpAllocatedAmountDetails" value="@item.Amount" />
                                                </td>
                                                <td style="text-align: center;">

                                                    <a href="javascript:void(0)" id="DeleteAllocationRow"><i class="fa fa-times"></i></a>

                                                </td>
                                            </tr>
                                            otherchargecount++;
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td>
                                                @Html.DropDownList("OtherChargeID", new SelectList(@ViewBag.OtherCharge, "OtherChargeID", "OtherCharge1"), "Select", new { @class = "form-control" })
                                                @*<input type="text" id="OtherChargeName" value="" class="form-control" autocomplete="off" style="height:27px;" />
                                                    <input type="hidden" id="OtherChargeID" value="" class="form-control" autocomplete="off" />*@
                                                <input type="hidden" id="OtherChargeAcHeadID" value="" class="form-control" autocomplete="off" />
                                            </td>
                                            <td>
                                                <input type="text" class="text-right form-control txtNum" id="ExpAmount" value="0" />
                                            </td>
                                            <td style="text-align:center;">
                                                <button type="button" style="height: 25px !important;margin-top:2px;border:0;    background: #35b8eb;color:#fff; vertical-align: middle;" index="1" id="AddExpAllocation" class="addmore">+</button>&nbsp;&nbsp;
                                                @*<button type="button" style="height: 25px !important;margin-top:14px; vertical-align: middle;border:none" id="AllocationClose"><i style="font-size:21px" class="fa fa-times"></i></button>*@
                                            </td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer" style="padding-top: 5px">
                        <button type="button" id="AllocationClose" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

    }
    <script type="text/javascript">
                                $(document).ready(function () {

                                    $('#AddExpAllocation').click(function () {
                                        if ($('#OtherCharge').attr('readonly') != 'readonly') {
                                            var Total = 0;
                                            var MainTotal = 0;
                                            var selectedval = $("#OtherChargeID").val();
                                            var exists = false;
                                            debugger;
                                            if (selectedval == 0) {
                                                alert('Please select Other Charge Name!');
                                                return;
                                            }
                                            $('#OtherChargeTable').find('.ExpAllocatedAmountDetails').each(function () {
                                                debugger;
                                                if (isNaN(parseFloat($(this).val())) === false) {
                                                    Total += parseFloat($(this).val());
                                                }
                                            });

                                            $('#OtherChargeTable').find('.OChargeID').each(function () {
                                                debugger;
                                                if ($(this).val() === selectedval) {
                                                    exists = true;
                                                    alert('Already this charge added!');
                                                    return;
                                                }
                                            });
                                            if (exists == true)
                                                return;

                                            if ($('#ExpAmount').val() == '' || $('#ExpAmount').val() == 0 || $('#ExpAmount').val() == undefined) {
                                                alert('Enter Amount!')
                                                return;
                                            }
                                            if (isNaN(parseFloat($('#ExpAmount').val())) === false) {
                                                Total += parseFloat($('#ExpAmount').val());
                                            }
                                            $('#OtherCharge').val(Total);
                                            var x = $("#CourierCharge").val();
                                            //var y = $("#PackingCharge").val();
                                            var z = $("#OtherCharge").val();
                                            //var a = $("#CustomCharge").val();
                                            var tot = parseFloat(x) + parseFloat(z); // + parseFloat(a); parseFloat(y)

                                            $("#totalCharge").val(tot.toFixed(2));
                                            //if (isNaN(parseFloat($('#amount').val())) === false) {
                                            //    MainTotal += parseFloat($('#amount').val());
                                            //}
                                            //if (Total > MainTotal) {
                                            //    alert('Amount cannot exceed total allocated amount');
                                            //    return;
                                            //}

                                            var othercharngename = $("#OtherChargeID option:selected").text();
                                        @*if (@otherchargecount>0)
                                            $('#RowCount').val(@otherchargecount);*@

                                            var RowCount = parseInt($('#RowCount').val());
                                            var RowHtml = '<tr><td>' + othercharngename + '<input type="hidden" class="OChargeID"  name="otherchargesVM[' + RowCount + '].OtherChargeID" value="' + $('#OtherChargeID').val() + '"/></td>';
                                            RowHtml = RowHtml + '<td>' + $('#ExpAmount').val() + '<input type="hidden" id="' + RowCount + '_Amount" name="otherchargesVM[' + RowCount + '].Amount" class="ExpAllocatedAmountDetails" value="' + $('#ExpAmount').val() + '"/></td>';
                                            RowHtml = RowHtml + '<td><a href="javascript:void(0)"  class="deleteallocrow" id="DeleteAllocationRow"><i class="fa fa-times"></i></a></td>';
                                            RowHtml = RowHtml + '</tr>';
                                            $('#OtherChargeTable').append(RowHtml);
                                            $('#RowCount').val(RowCount + 1);
                                            ///otherchargecount++;
                                            $("#OtherChargeName").val('');
                                            $("#OtherChargeID").val(0);
                                            $("#ExpAmount").val(0);
                                            $('#OtherChargeName').focus()
                                        }
                                        else {
                                            $.notify('Charges could not be edited in the Invoiced AWB!');
                                        }
                                    });

                                    $('.txtNum').blur(function () {
                                        if (isNaN(parseInt($(this).val()))) {
                                            $(this).val('0.00');
                                        } else {
                                            var amt = parseFloat($(this).val());
                                            $(this).val(amt.toFixed(2));
                                        }
                                    });

                                    $('#OtherChargeTable').on("click", "#DeleteAllocationRow", function () {
                                        if ($('#OtherCharge').attr('readonly') != 'readonly') {
                                            $(this).parent().parent().remove();
                                        }
                                    });

                                    //$('#details').on("click", "#DeleteAllocationRow", function () {

                                    //    $(this).parent().parent().remove();
                                    //});
                                });
                                function ClearData() {
                                    $("#ReceivedFrom").val('');
                                    $("#SelectedReceivedFrom").val(0);
                                    $("#amount").val('');
                                    $("#remark1").val('');
                                    $("#AcHeadAllocation").val('');
                                    $("#SelectedAcHeadAllocation").val(0);
                                    $("#ExpAmount").val('');
                                    $("#ExpAllocationTable").find("tr:gt(0)").remove();
                                }
    </script>




    <div class="modal fade" id="StatusModal" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="border-radius: 5px;">
                <div class="modal-header" style="background-color: #f5f5f5;">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="exampleModalLabel">
                        Change Status
                    </h4>
                </div>

                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row" style="padding-top: 5px">
                            <div class="col-sm-12">
                                <div class="row">
                                    <div class="col-xs-5 col-sm-3">
                                        Shipment Status
                                    </div>
                                    <div class="col-xs-7 col-sm-9">
                                        @Html.DropDownList("StatusTypeId", new SelectList(@ViewBag.StatusTypeList, "ID", "Name", 0), "Select", new { @class = "form-control", @id = "ChangeStatusTypeId", @name = "ChangeStatusTypeId" })
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px">
                                    <div class="col-xs-5 col-sm-3">
                                        Courier Status
                                    </div>
                                    <div class="col-xs-7 col-sm-9">
                                        @Html.DropDownList("CourierStatusId", new SelectList(@ViewBag.CourierStatusList, "CourierStatusID", "CourierStatus", @ViewBag.CourierStatusId), "Select", new { @class = "form-control", @id = "ChangeCourierStatusId", @name = "ChangeCourierStatusId" })
                                        @*<input type="text" id="ChangeCourierStatusId" class="form-control" value="2" width="100%" />*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="padding-top: 5px">
                    <input type="hidden" id="hdnCountryID" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" name="Command" value="SaveStatus" class="btn btn-primary" id="btnsavestatus">Save</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="CustomerNotifiyModal" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #f5f5f5;">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="exampleModalLabel">
                        Customer Notification
                    </h4>
                </div>

                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row" style="padding-top: 5px">
                            <div class="col-md-12">
                                <div class="row">
                                    <div class="col-xs-5 col-sm-3">
                                        To Customer
                                    </div>
                                    <div class="col-xs-7 col-sm-9">
                                        <input type="hidden" id="hdnNotificationId" value="0" />
                                        <input class="form-control" type="text" id="txtcustomername" />
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px;">
                                    <div class="col-xs-5 col-sm-3">
                                        Customer Email
                                    </div>
                                    <div class="col-xs-7 col-sm-9">
                                        <input class="form-control" type="text" id="txtcustomeremail" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 checkboxdesign">
                                        @Html.CheckBox("SMS", new { @name = "SMS" })
                                        <label class="headinglabel">SMS</label>
                                    </div>
                                    <div class="col-md-4 checkboxdesign">
                                        @Html.CheckBox("Email", new { @name = "Email" })
                                        <label class="headinglabel">Email</label>
                                    </div>
                                    <div class="col-md-4 checkboxdesign">
                                        @Html.CheckBox("WhatsApp", new { @name = "WhatsApp" })
                                        <label class="headinglabel">Whats App</label>
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px">
                                    <div class="col-xs-5 col-sm-3">
                                        Enter your Message
                                    </div>
                                    <div class="col-xs-7 col-sm-9">
                                        <textarea id="notifymessage" cols="65" rows="5"></textarea>
                                    </div>
                                </div>
                                <div class="row no-margin" style="padding-top:10px">

                                    <div class="col-md-12">
                                        <table id="notificationdetails" class="table table-responsive table-bordered" style="background-color:white">
                                            <thead>
                                            <th>S No.</th>
                                            <th>Message</th>
                                            <th>Date</th>
                                            <th>Employee Name</th>
                                            </thead>
                                            <tbody id="notificationdetailsbody"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="padding-top: 5px">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" name="Command" value="SaveStatus" class="btn btn-primary" id="btncustomernotifysave" onclick="savecustomernotification();">Save</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="StaffNotesModal" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #f5f5f5;">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="exampleModalLabel">
                        Staff Notes
                    </h4>
                </div>

                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row" style="padding-top: 5px">
                            <div class="col-sm-12">
                                <div class="row" style="margin-top:10px">
                                    <div class="col-xs-12 col-sm-12">
                                        <input type="hidden" id="hdnStaffNotesId" value="0" />
                                        <label for="staffnotes" class="control-label">Enter your Notes</label>
                                        <textarea id="staffnotes" class="col-md-12" cols="65" rows="5"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row no-margin" style="padding-top:10px">

                            <div class="col-md-12">
                                <table id="notesdetails" class="table table-responsive table-bordered" style="background-color:white">
                                    <thead>
                                    <th>S No.</th>
                                    <th>Notes</th>
                                    <th>Date</th>
                                    <th>Employee Name</th>
                                    </thead>
                                    <tbody id="notesdetailsbody"></tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="modal-footer" style="padding-top: 5px">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" name="Command" value="SaveNotes" class="btn btn-primary" id="btnstaffnotessave" onclick="savestaffnotes()">Save</button>
                </div>
            </div>
        </div>
    </div>



</section>
