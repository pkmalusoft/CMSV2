@model CMSV2.Models.ImportShipmentFormModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";

    //var cities = (IEnumerable<CourierMVC.EntityFramework.S_CityMaster>)ViewBag.Cities;
}
<style>

  
    .reve_rates > input {
        font-size: 12px !important;
    }

    .reve_rates1 > input {
        font-size: 12px !important;
    }

    .reve_rates2 > input {
        font-size: 12px !important;
    }

    

    .reve_rates3 > textarea {
        min-height: 4rem !important;
        font-size: 12px !important;
    }

    
</style>
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />
<script type="text/javascript">   
    var placeSearch, autocomplete, originairportCity, destinationairportCity; destinationCity, destinationCountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        
        originairportCity = new google.maps.places.Autocomplete(
            document.getElementById('OriginAirportCity'), { types: ['geocode'] });



        destinationairportCity = new google.maps.places.Autocomplete(
            document.getElementById('DestinationAirportCity'), { types: ['geocode'] });

        destinationCity = new google.maps.places.Autocomplete(
            document.getElementById('tDestinationCityID'), { types: ['geocode'] });

        destinationCountry = new google.maps.places.Autocomplete(
            document.getElementById('tDestinationCountryID'), { types: ['geocode'] });

    }

    function fillInAddress() {
        debugger;
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        console.log(place.address_components);

       
        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate(obj) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                $(obj).setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script type="text/javascript">
    $(document).on("click", "#btnUpload", function () {
        var files = $("#importFile").get(0).files;

        var formData = new FormData();
        formData.append('importFile', files[0]);

        $.ajax({
            url: '/ImportManifest/ImportFile',
            data: formData,
            type: 'POST',
            contentType: false,
            processData: false,
            success: function (response) {
                if (response.Status === 1) {
                    var data=response.data;

                    $.each(data, function (index, item) {
                        if (item.Origin == null)
                            item.Origin = "";
                        if (item.Destination == null) {
                            item.Destination = "";
                        }
                        var i = $('#listContainer tr').length;
                        var datahtml = '<input type="hidden" class="hdndeleted" id="hdndeleted_' + i + '"  value="false" /> <input type="hidden" id="hdnAWbNo_' + i + '"  value="' + item.AWB + '" />  <input type="hidden" id="hdnInScanId_' + i + '"  value="' + item.InScanId + '" /> '
                        $("#listContainer").append('<tr awbno="' + item.AWB + '"><td>' + datahtml + (parseInt(i) + 1) + '</td><td>' + item.AWB + '</td><td>' + item.Origin + '</td><td>' + item.Destination + '</td><td></td></tr>');
                        //<a awbno="' + item.AWB + '" href="javascript:void(0);" onclick="deletetrans(this,' + i + ')" class="rem">Remove</a>
                        //$("#detailsbody").append('<tr awbno="' + item.AWB + '"><td>' + (parseInt(index) + 1) + '</td><td>' + item.AWB + '</td><td>' + item.Origin + '</td><td>' + item.Destination + '</td><td></td></tr>');
                        //<td><a awbno="' + item.AWB + '" href="javascript:void(0);" class="rem">Remove</a></td>
                    });
                    var i = $('#listContainer tr').length();

                } else {
                    alert("Failed to Import");
                }
            }
        });
    });

     
    $(function () {
        $('#CreatedDate').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
    });
</script>

<section class="content-header">
    <div class="row">
        <div class="col-md-5 pull-left">
            <h1 class="headingfont">Create Shipments</h1>
        </div>
        @*<div class="col-md-5 pull-right text-right">
                <h2 class="awb"><strong>@ViewBag.AWBNo</strong></h2>
                <h5 id="h1status" style="color:red">@ViewBag.Status</h5>

            </div>*@
        <hr />
    </div>
    <section class="content">
        @using (Html.BeginForm("Create", "ImportManifest", FormMethod.Post, new { @id = "importShipment" }))
        {
            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.ManifestNumber, "Manifest Number", htmlAttributes: new { @class = "headinglabel " })

                    @Html.TextBoxFor(model => model.ManifestNumber, new { @class = "form-control", @disabled = "true", @style = "text-decoration:none", @width = "100%" })

                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.CreatedDate, "Manifest Date", htmlAttributes: new { @class = "headinglabel" })

                    @Html.TextBoxFor(model => model.CreatedDate, new { @class = "form-control", @required = "true", @disabled = "true" })

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Agent</label>
                    @Html.DropDownListFor(model => model.AgentID, new SelectList(@ViewBag.Agent, "AgentID", "Name"), "Select", new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Route</label>
                    @Html.TextBoxFor(model => model.Route, new { @class = "form-control", @required = "true" })
                </div>

            </div>
            <div class="row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.OriginAirportCity, "Origin Airport City", htmlAttributes: new { @class = "headinglabel required" })

                    @Html.TextBoxFor(model => model.OriginAirportCity, new { @class = "form-control", @required = "true", @onFocus = "geoCitylocate(this)" })
                    @Html.ValidationMessageFor(model => model.OriginAirportCity, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.DestinationAirportCity, "Destination Airport City", htmlAttributes: new { @class = "headinglabel required" })

                    @Html.TextBoxFor(model => model.DestinationAirportCity, new { @class = "form-control", @required = "true", @onFocus = "geoCitylocate(this)" })

                    @Html.ValidationMessageFor(model => model.DestinationAirportCity, "", new { @class = "text-danger" })

                </div>


                <div class="col-md-3">
                    @Html.LabelFor(model => model.MAWB, htmlAttributes: new { @class = "headinglabel required" })

                    @Html.TextBoxFor(model => model.MAWB, new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.MAWB, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Parcel No.</label>
                    @Html.TextBoxFor(model => model.ParcelNo, new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.ParcelNo, "", new { @class = "text-danger" })

                </div>

            </div>
            <div class="row">
                <div class="col-md-3">
                    <label class="headinglabel required">Bag</label>

                    @Html.TextBoxFor(model => model.Bags, new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Bags, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Weight</label>
                    @Html.TextBoxFor(model => model.Weight, new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Type</label>
                    @Html.DropDownListFor(model => model.Type, (IEnumerable<SelectListItem>)ViewBag.Type, Model.Type, htmlAttributes: new { @class = "form-control", @required = "true", @selected = @Model.Type })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })

                </div>
                    <div class="col-md-2">
                        <label class="headinglabel required">Total AWB</label>

                        @Html.TextBoxFor(model => model.TotalAWB, new { @class = "form-control", @min = 1, @required = "true" })
                        @Html.ValidationMessageFor(model => model.TotalAWB, "", new { @class = "text-danger" })
                    </div>               
                    <div class="col-md-1">
                        <input class="form-control" type="file" name="importFile" id="importFile" />
                        <input type="button" id="btnfile" />
                        <input class="btn btn-primary" id="btnUpload" type="button" value="Upload" />

                    </div>
                </div>                       
            
            <div class="table-responsive tblbackground" style="padding:15px;margin-top:20px">
                <table class="table table-responsive table-bordered tblfont" role="grid" aria-describedby="datatable-1_info" style="min-width: 100%" id="DetailsTable">

                    @*<table class="table" style="min-width: 100%">*@
                    <thead class="input-table">
                        <tr>
                            <th width="20px">
                                S.No
                            </th>
                            <th>
                                HAWB
                            </th>
                            <th>
                                AWB
                            </th>
                            <th>
                                Bag.No
                            </th>
                            <th>
                                Contents
                            </th>
                            <th>
                                Shipper
                            </th>
                            <th>
                                Reciver
                            </th>
                            <th>
                                PCS
                            </th>
                            <th>
                                Weight
                            </th>
                            <th>
                                Value
                            </th>
                            <th>
                                Currency
                            </th>
                            <th width="100px">
                                Destination Country
                            </th>
                            <th width="100px">
                                Destination City
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody class="input-table" id="listContainer">
                    </tbody>
                </table>
            </div>
            <hr />
            @*<div class="form-group col-lg-3 col-md-6 col-sm-12 float-right" style="display:flex">
                <div class="col-md-4">
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-secondary btn-sm waves-effect waves-light float-right" })
                </div>
                <div class="col-md-4">
                    <input type="submit" value="Submit" id="btnSubmit" class="btn btn-primary waves-effect waves-light" />
                </div>
            </div>*@
            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-12 btn-right">
                    <input type="submit" value="Submit" class="btn btn-primary waves-effect waves-light" />
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-danger btnwidth" })
                </div>

            </div>
        }
    </section>



</section>



<script>
        function initialize() {
            var options = {
                types: ['(cities)'],
            };
            var options1 = {
                types: ['(regions)'],
            };
            var input2 = document.getElementById('DestinationCity');
            new google.maps.places.Autocomplete(input2,options);
            var input3 = document.getElementById('OriginCity');
            new google.maps.places.Autocomplete(input3,options);
            var input1 = document.getElementById('tDestinationCityID');
            new google.maps.places.Autocomplete(input1,options);
            var input = document.getElementById('tDestinationCountryID');
            new google.maps.places.Autocomplete(input, options1);

        }

        google.maps.event.addDomListener(window, 'load', initialize);

        $("#DestinationCountryID").change(function () {
            var id = $(this).val();
            $("#DestinationCityID").empty();
            $.get("/DataFetch/GetCity", { id: id }, function (data) {
                if (data.length > 0) {
                    var v = "<option value=''>Select City</option>";
                    $.each(data, function (i, v1) {
                        v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
                    });
                    $("#DestinationCityID").prop("disabled", false);
                    $("#DestinationCityID").html(v);
                } else {
                    var v = "<option value=''>Select City</option>";
                    $("#DestinationCityID").html(v);
                    $("#DestinationCityID").prop("disabled", true);
                };
            });
        });
        //$("#tDestinationCountryID").change(function () {
        //    var id = $(this).val();
        //    $("#tDestinationCityID").empty();
        //    $.get("/DataFetch/GetCity", { id: id }, function (data) {
        //        if (data.length > 0) {
        //            var v = "<option>Select City</option>";
        //            $.each(data, function (i, v1) {
        //                v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
        //            });
        //            $("#tDestinationCityID").prop("disabled", false);
        //            $("#tDestinationCityID").html(v);
        //            $("#tDestinationCityID").css("width", "100% !important");

        //        } else {
        //            var v = "<option>Select City</option>";
        //            $("#tDestinationCityID").html(v);
        //            $("#tDestinationCityID").prop("disabled", true);
        //            $("#tDestinationCityID").css("width", "100% !important");
        //        };
        //    });
        //});
        $(document).ready(function () {
            $(".datetimepick1").datetimepicker({
                format: 'd-m-Y H:i',
                step: 15
            });
            $("#DestinationCountryID").trigger("change");
            //tSerialNum1
            var snoval = parseInt('@Model.Shipments.Count') + 1;
            $("#tSerialNum1").val(snoval)
           $("#TotalAWB").val('');
            $("#importshipment").addClass("active");

            $("#btnSubmit").click(function () {

                var detailslen = $('#DetailsTable > tbody > tr').length;
                if (detailslen == 0) {
                    alert("Please add Shipment Details");
                    return false;
                } else {
                    return true;
                }

            });
        });

        function addShipment() {
            $.ajax({
                url: '@Url.Action("AddOrRemoveShipment", "ImportShipment")',
                type: 'post',
                dataType: 'html',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    $("#listContainer").html(data);
                }
            });
        }

        function addShipment1() {
            $("#Newbtn").text("Add");
            var validation = ValidateDetails();
            if (validation == 1) {
                var data1 = new FormData();
                $("#DetailsError").css("display", "none");

                data1.append("tSerialNum", $("#tSerialNum").val());
                data1.append("isupdate", false);

                data1.append("tHAWB", $("#tHAWB").val());
                data1.append("tAWB", $("#tAWB").val());
                data1.append("tBagNo", $("#tBagNo").val());
                data1.append("tContents", $("#tContents").val());
                data1.append("tPCS", $("#tPCS").val());
                data1.append("tWeight", $("#tWeight").val());
                data1.append("tValue", $("#tValue").val());
                data1.append("tCurrencyID", $("#tCurrencyID").val());
                data1.append("tShipper", $("#tShipper").val());
                data1.append("tReciver", $("#tReciver").val());
                data1.append("tDestinationCountryID", $("#tDestinationCountryID").val());
                data1.append("tDestinationCityID", $("#tDestinationCityID").val());

                data1.append("tId", $("#tId").val());
                $.ajax({
                    url: '@Url.Action("AddShippmentToTable", "ImportShipment")',
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',
                    data: data1,
                    success: function (data) {
                        $.ajax({
                            url: '@Url.Action("AddOrRemoveShipment", "ImportShipment")',
                            type: 'post',
                            dataType: 'html',
                            data: $('form#importShipment').serialize(),
                            success: function (data) {
                                $("#listContainer").html(data);

                                $("#tSerialNum").val(0);
                                $("#tHAWB").val('');
                                $("#tAWB").val('');
                                $("#tBagNo").val(0);
                                $("#tContents").val('');
                                $("#tPCS").val(0);
                                $("#tWeight").val(0);
                                $("#tValue").val(0);
                                $("#tCurrencyID").val('');
                                $("#tShipper").val('');
                                $("#tReciver").val('');
                                $("#tDestinationCountryID").val('');
                                $("#tDestinationCityID").val('');
                                //$("#tDestinationCityID").prop("disabled", true);

                                $("#tId").val(0);

                            }
                        });
                        //$("#listContainer").html(data);
                    }
                });
            } else {
                $("#DetailsError").css("display", "block");
            }
        }

        function UpdateDetails() {
            debugger;
            var validation = ValidateDetails();
            if (validation == 1) {
                var data1 = new FormData();
                $("#DetailsError").css("display", "none");

                data1.append("tSerialNum", $("#tSerialNum").val());
                data1.append("isupdate", true);
                data1.append("tHAWB", $("#tHAWB").val());
                data1.append("tAWB", $("#tAWB").val());
                data1.append("tBagNo", $("#tBagNo").val());
                data1.append("tContents", $("#tContents").val());
                data1.append("tPCS", $("#tPCS").val());
                data1.append("tWeight", $("#tWeight").val());
                data1.append("tValue", $("#tValue").val());
                data1.append("tCurrencyID", $("#tCurrencyID").val());
                data1.append("tShipper", $("#tShipper").val());
                data1.append("tReciver", $("#tReciver").val());
                data1.append("tDestinationCountryID", $("#tDestinationCountryID").val());
                data1.append("tDestinationCityID", $("#tDestinationCityID").val());

                data1.append("tId", $("#tId").val());
                $.ajax({
                    url: '@Url.Action("AddShippmentToTable", "ImportShipment")',
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',
                    data: data1,
                    success: function (data) {
                        $.ajax({
                            url: '@Url.Action("AddOrRemoveShipment", "ImportShipment")',
                            type: 'post',
                            dataType: 'html',
                            data: $('form#importShipment').serialize(),
                            success: function (data) {
                                $("#listContainer").html(data);

                                $("#tSerialNum").val(0);
                                $("#tHAWB").val('');
                                $("#tAWB").val('');
                                $("#tBagNo").val(0);
                                $("#tContents").val('');
                                $("#tPCS").val(0);
                                $("#tWeight").val(0);
                                $("#tValue").val(0);
                                $("#tCurrencyID").val('');
                                $("#tShipper").val('');
                                $("#tReciver").val('');
                                $("#tDestinationCountryID").val('');
                                $("#tDestinationCityID").val('');
                                //$("#tDestinationCityID").prop("disabled", false);

                                $("#tId").val(0);

                                $("#updatebtndiv").css('display', 'none');

                                $("#addbtndiv").css('display', 'block');
                            }
                        });
                        //$("#listContainer").html(data);
                    }
                });

            } else {
                $("#DetailsError").css("display", "block");

            }
        }
        function ValidateDetails() {
         var hawb=   $("#tHAWB").val();
         var awb=  $("#tAWB").val();
         var bno=   $("#tBagNo").val();
         var content=  $("#tContents").val();
         var pcs=    $("#tPCS").val();
         var weigh=   $("#tWeight").val();
         var valu=  $("#tValue").val();
         var curency=  $("#tCurrencyID").val();
         var shiper= $("#tShipper").val();
         var reciver= $("#tReciver").val();
         var destcountry=  $("#tDestinationCountryID").val();
            var destcity = $("#tDestinationCityID").val();

            if (hawb = '' || awb == '' || bno == '' || content == '' || pcs == '' || weigh == '' || valu == '' || curency == '' || shiper == '' || reciver == '' || destcountry == '' || destcity=='') {
                return 0;
            } else if (hawb = null || awb == null || bno == null || content == null || pcs == null || weigh == null || valu == null || curency == null || shiper == null || reciver == null || destcountry == null || destcity == null) {
                return 0;
            }
            else {
                return 1;
            }
        }
           function deleteShipment(i) {
            $.ajax({
                url: '@Url.Action("AddOrRemoveShipment", "ImportShipment")?i='+i,
                type: 'post',
                dataType: 'html',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    $("#listContainer").html(data);
                    var detailslen = $('#DetailsTable > tbody > tr').length;
                    if (detailslen == 0) {

                        $("#Newbtn").text("New");
                    }
                    CancelDetails();
                }
               });

        }
        function EditShipment(i) {
            $.ajax({
                url: '@Url.Action("GetShipmentDetails", "ImportShipment")?i='+i,
                type: 'post',
                dataType: 'Json',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    debugger;
                    if (data.success == true) {
                        $("#tSerialNum").val(data.ival);
                        $("#tHAWB").val(data.data.HAWB);
                        $("#tAWB").val(data.data.AWB);
                        $("#tBagNo").val(data.data.BagNo);
                        $("#tContents").val(data.data.Contents);
                        $("#tPCS").val(data.data.PCS);
                        $("#tWeight").val(data.data.Weight);
                        $("#tValue").val(data.data.Value);
                        $("#tCurrencyID").val(data.data.CurrencyID);
                        $("#tShipper").val(data.data.Shipper);
                        $("#tReciver").val(data.data.Reciver);
                        $("#tDestinationCountryID").val(data.data.DestinationCountry);
                        $("#tDestinationCityID").val(data.data.DestinationCity);

                        $("#tId").val(data.data.ShipmentDetailID);

                        $("#addbtndiv").css('display', 'none');
                        $("#updatebtndiv").css('display', 'block');
                         var snoval = parseInt(data.ival) + 1;
                        $("#tSerialNum1").val(snoval)
                    }
                    //$("#listContainer").html(data);
                }
            });
        }
        function CancelDetails() {

            $("#DetailsError").css("display", "none");

            $("#tSerialNum").val(0);
            $("#tHAWB").val('');
            $("#tAWB").val('');
            $("#tBagNo").val(0);
            $("#tContents").val('');
            $("#tPCS").val(0);
            $("#tWeight").val(0);
            $("#tValue").val(0);
            $("#tCurrencyID").val('');
            $("#tShipper").val('');
            $("#tReciver").val('');
            $("#tDestinationCountryID").val('');
            $("#tDestinationCityID").val('');
            //$("#tDestinationCityID").prop("disabled", true);
            $("#updatebtndiv").css('display', 'none');

            $("#addbtndiv").css('display', 'block');
        }
        function populateCity(ctrl, id) {
            var idd = $(ctrl).val();
            $(id).empty();
            $.get("/DataFetch/GetCity", { id: idd }, function (data) {
                if (data.length > 0) {
                    var v = "<option>Select City</option>";
                    $.each(data, function (i, v1) {
                        v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
                    });
                    $(id).prop("disabled", false);
                    $(id).html(v);
                } else {
                    var v = "<option>Select City</option>";
                    $(id).html(v);
                    $(id).prop("disabled", true);
                };
            });
        }
</script>


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCexhtncgr1cTUh0hzKOrK_GsS_tifAEns&libraries=places&callback=initAutocomplete" async defer></script>