
@model CMSV2.Models.DRRRecPayVM
@{
    int i = 0;
    var _decimal = @Session["Decimal"].ToString();
}

@foreach (var item in Model.Details)
{
<tr>
    <td>

        @Html.HiddenFor(model => model.Details[i].RecPayDetailID, new { @Value = @item.RecPayDetailID })
        @Html.HiddenFor(model => model.Details[i].RecPayID, new { @Value = @item.RecPayID })
        @Html.HiddenFor(model => model.Details[i].AWBNo, new { @Value = @item.AWBNo })
        @Html.HiddenFor(model => model.Details[i].InScanID, new { @Value = @item.InScanID })
        @Html.HiddenFor(model => model.Details[i].MaterialCost, new { @Value = @item.MaterialCost })
        @Html.HiddenFor(model => model.Details[i].AmountPending, new { @Value = @item.AmountPending, @id = "txtTotalCharge_" + @i })

        @(i + 1)
    </td>
    <td>
        @item.AWBNo
    </td>
    <td>
        @CMSV2.Models.CommanFunctions.GetShortDateFormat(@item.AWBDateTime)
    </td>
    <td>
        @item.ConsignorName
    </td>
    <td>
        @item.ConsigneeName
    </td>
    <td class="text-right">
        @CMSV2.Models.CommanFunctions.GetFormatNumber(@item.MaterialCost, _decimal)
    </td>
    <td class="text-right" style="background-color:lightgray">
        @CMSV2.Models.CommanFunctions.GetFormatNumber(@item.AmountReceived, _decimal)
    </td>
    <td class="text-right">
        @CMSV2.Models.CommanFunctions.GetFormatNumber(@item.AmountPaid, _decimal)
    </td>
    <td class="text-right">
        @CMSV2.Models.CommanFunctions.GetFormatNumber(@item.AmountPending, _decimal)
    </td>
    <td class="text-right">
        @Html.TextBoxFor(model => model.Details[i].Amount, string.Format("{0:n2}", @Model.Details[i].Amount), new { @class = "allocation  form-control text-right", @id = "txtAmountAllocated_" + @i })
    </td>
    <td class="text-right">
        @Html.TextBoxFor(model => model.Details[i].AdjustmentAmount, string.Format("{0:n2}", @Model.Details[i].AdjustmentAmount), new { @class = "allocation form-control text-right", @id = "txtDiscount_" + @i })
    </td>
    <td>
        <div class="col-md-1 ">

            @Html.CheckBoxFor(model => model.Details[i].AWBChecked, new { @id = "chk_" + @i, @name = "AWBChecked", @class = "checkfilter calfield", style = "margin-left:10px;" })
        </div>

    </td>

</tr>
    i++;
}



<script>
    $(document).ready(function () {
       

        $("#Selectall").change(function () {
            var i = 0;
            if ($(this).prop("checked") == true) {
                i = 1;
                $("#listContainer tbody tr").addClass('Selected');
                $(".checkfilter").prop('checked', true);
            } else {
                $("#listContainer tbody tr").removeClass('Selected');
                $(".checkfilter").prop('checked', false);
            }

            calculatetotal();      

        });

        $(".checkfilter").change(function () {
            debugger;
            var id = this.id;
            var idindex = id.split('_')[1];
            if ($(this).prop("checked") == true) {
                $("#listContainer tbody tr[id=" + idindex + "]").addClass('Selected');
                $('#txtAmountAllocated_' + idindex).val($('#txtTotalCharge_' + idindex).val());
                $('#txtDiscount_' + idindex).val(0);
                calculatetotal();

            } else {
                $("#listContainer tbody tr[id=" + idindex + "]").removeClass('Selected');
                $('#txtAmountAllocated_' + idindex).val(0);
                $('#txtDiscount_' + idindex).val(0);
                $("#Selectall").prop('checked', false);
                calculatetotal();
            }
           
            
        });

        $('.allocation').change(function () {
            var id = $(this).attr('id');
            var idindex = id.split('_')[1];
            checkallocation(idindex, this);
            calculatetotal();            
            
        });

        $('.allocation').blur(function () {
            
            $(this).val(parseFloat($(this).val()).toFixed(2));
            
        });
    });

</script>